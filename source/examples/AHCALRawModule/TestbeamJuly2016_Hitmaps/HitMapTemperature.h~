 /// \file AHCALRawModuleGlobal.h
/*
 *
 *-------------------------------------------------------------
 * AHCALRawModuleChannel.cc source template automatically modified from 
 * CaloHitModule  generated by a class generator
 * by A. Irles, DESY, 23 March 2016
 *--------------------------------------------------------------
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

#ifndef HitMapTemperature_H
#define HitMapTemperature_H

#include "dqm4hep/DQMAnalysisModule.h"

namespace dqm4hep
{

class DQMMonitorElement;

/** HitMapTemperature class
 */ 
class HitMapTemperature : public DQMAnalysisModule
{
public:
	HitMapTemperature();
	~HitMapTemperature();

	StatusCode initModule();
	StatusCode readSettings(const TiXmlHandle xmlHandle);
	StatusCode processEvent(DQMEvent *pEvent);
	StatusCode startOfCycle();
	StatusCode endOfCycle();
	StatusCode startOfRun(DQMRun *pRun);
	StatusCode endOfRun(DQMRun *pRun);
	StatusCode endModule();

        StatusCode buildGeometryMap(const TiXmlHandle xmlHandle);
        int electronicsToIJK(int Chip, int Channel);
        int IJKToElectronics(int I, int J, int K);

protected:

	// Temperature
        DQMMonitorElementPtr                        m_pTempAverage_1;
        DQMMonitorElementPtr                        m_pTempAverage_2;
        DQMMonitorElementPtr                        m_pTempAverage_3;
        DQMMonitorElementPtr                        m_pTempDIF_1;
        DQMMonitorElementPtr                        m_pTempDIF_2;
        DQMMonitorElementPtr                        m_pTempDIF_3;
        DQMMonitorElementPtr                        m_pTempPWR_1;
        DQMMonitorElementPtr                        m_pTempPWR_2;
        DQMMonitorElementPtr                        m_pTempPWR_3;

	// ADC hitmaps
        DQMMonitorElementPtr                        m_pADC_300_l1;
	DQMMonitorElementPtr                        m_pADC_300_l2;
        DQMMonitorElementPtr                        m_pADC_300_l3;
        DQMMonitorElementPtr                        m_pADC_300_l4;
        DQMMonitorElementPtr                        m_pADC_300_l5;
        DQMMonitorElementPtr                        m_pADC_300_l6;
        DQMMonitorElementPtr                        m_pADC_300_l7;
        DQMMonitorElementPtr                        m_pADC_300_l8;
        DQMMonitorElementPtr                        m_pADC_300_l9;
        DQMMonitorElementPtr                        m_pADC_300_l10;
        DQMMonitorElementPtr                        m_pADC_300_l11;
        DQMMonitorElementPtr                        m_pADC_300_l12;
        DQMMonitorElementPtr                        m_pADC_300_l13;
        DQMMonitorElementPtr                        m_pADC_300_l14;
        DQMMonitorElementPtr                        m_pADC_300_l15;

        std::string                                 m_geometryFile;
        std::map<int, int>                          ijkmap;
        std::map<int, int>                          chpchnmap;

}; 

} 

#endif  //  HitMapTemperature_H
