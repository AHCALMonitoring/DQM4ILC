
/// \file HitMap.cc
/*
 *-------------------------------------------------------------
 * AHCALRawModule.cc source template automatically modified from 
 * CaloHitModule  generated by a class generator
 * by A. Irles, DESY, 23 March 2016
 *--------------------------------------------------------------
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "HitMap.h"
// to handle and acces to the elements in the LCIO generic Object

// -- std headers
#include <ctime>
#include <time.h>
#include <time.h>
#include <locale>
#include <cstdlib>
#include <limits>
#include <string>

//#ifndef USELCIO
//#define USELCIO
#include "EVENT/LCGenericObject.h"
#include "EVENT/LCCollection.h"
#include "EVENT/LCEvent.h"
#include "EVENT/LCIO.h"
#include "UTIL/CellIDDecoder.h"
#include "UTIL/LCTOOLS.h"
//#endif

// -- dqm4hep headers
#include "dqm4hep/DQMMonitorElement.h"
#include "dqm4hep/DQMCoreTool.h"
#include "dqm4hep/DQMRun.h"
#include "dqm4hep/DQMXmlHelper.h"
#include "dqm4hep/DQMEvent.h"
#include "dqm4hep/DQMQualityTest.h"
#include "dqm4hep/DQMModuleApi.h"
#include "dqm4hep/DQMPlugin.h"

// -- root headers
#include "TRandom.h"
#include "TString.h" // Added by Tom for TString handling
#include "TDatime.h"

//using namespace lcio;

namespace dqm4hep
{
  // module plugin declaration
  DQM_PLUGIN_DECL( HitMap , "HitMap" )

  //-------------------------------------------------------------------------------------------------

  HitMap::HitMap() :
  DQMAnalysisModule()
  {
    setDetectorName("NO DETECTOR");
    setVersion(1, 0, 0);
  }

  //-------------------------------------------------------------------------------------------------

  HitMap::~HitMap()
  {
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode HitMap::readSettings(const TiXmlHandle xmlHandle)
  {


    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- readSettings()" );

    std::string m_geometryFilename = "";

    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, DQMXmlHelper::readParameterValue(xmlHandle,
                                                                                                             "GeometryFilename", m_geometryFilename));

    dqm4hep::TiXmlDocument m_geometryFile(m_geometryFilename);
    
    if( ! m_geometryFile.LoadFile() )
      return dqm4hep::STATUS_CODE_FAILURE;

    const dqm4hep::TiXmlHandle xmlGeometryFileHandle(&m_geometryFile);

    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, HitMap::buildGeometryMap(xmlGeometryFileHandle));
    

  //---------------------------------------------------------------------
    //3-D hitmaps
    m_pMIP_300 = NULL;
    m_pPed_300 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "MIP_300", m_pMIP_300));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "Ped_300", m_pPed_300));

    //---------------------------------------------------------------------
    //MIP hitmaps
    m_pMIP_300_l01 = NULL;
    m_pMIP_300_l02 = NULL;
    m_pMIP_300_l03 = NULL;
    m_pMIP_300_l04 = NULL;
    m_pMIP_300_l05 = NULL;
    m_pMIP_300_l06 = NULL;
    m_pMIP_300_l07 = NULL;
    m_pMIP_300_l08 = NULL;
    m_pMIP_300_l09 = NULL;
    m_pMIP_300_l10 = NULL;
    m_pMIP_300_l11 = NULL;
    m_pMIP_300_l12 = NULL;
    m_pMIP_300_l13 = NULL;
    m_pMIP_300_l14 = NULL;
    m_pMIP_300_l15 = NULL;

    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "MIP_300_l01", m_pMIP_300_l01));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "MIP_300_l02", m_pMIP_300_l02));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "MIP_300_l03", m_pMIP_300_l03));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "MIP_300_l04", m_pMIP_300_l04));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "MIP_300_l05", m_pMIP_300_l05));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "MIP_300_l06", m_pMIP_300_l06));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "MIP_300_l07", m_pMIP_300_l07));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "MIP_300_l08", m_pMIP_300_l08));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "MIP_300_l09", m_pMIP_300_l09));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "MIP_300_l10", m_pMIP_300_l10));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "MIP_300_l11", m_pMIP_300_l11));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "MIP_300_l12", m_pMIP_300_l12));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "MIP_300_l13", m_pMIP_300_l13));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "MIP_300_l14", m_pMIP_300_l14));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "MIP_300_l15", m_pMIP_300_l15));


    //---------------------------------------------------------------------
    //Ped hitmaps
    m_pPed_300_l01 = NULL;
    m_pPed_300_l02 = NULL;
    m_pPed_300_l03 = NULL;
    m_pPed_300_l04 = NULL;
    m_pPed_300_l05 = NULL;
    m_pPed_300_l06 = NULL;
    m_pPed_300_l07 = NULL;
    m_pPed_300_l08 = NULL;
    m_pPed_300_l09 = NULL;
    m_pPed_300_l10 = NULL;
    m_pPed_300_l11 = NULL;
    m_pPed_300_l12 = NULL;
    m_pPed_300_l13 = NULL;
    m_pPed_300_l14 = NULL;
    m_pPed_300_l15 = NULL;

    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "Ped_300_l01", m_pPed_300_l01));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "Ped_300_l02", m_pPed_300_l02));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "Ped_300_l03", m_pPed_300_l03));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "Ped_300_l04", m_pPed_300_l04));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "Ped_300_l05", m_pPed_300_l05));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "Ped_300_l06", m_pPed_300_l06));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "Ped_300_l07", m_pPed_300_l07));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "Ped_300_l08", m_pPed_300_l08));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "Ped_300_l09", m_pPed_300_l09));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "Ped_300_l10", m_pPed_300_l10));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "Ped_300_l11", m_pPed_300_l11));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "Ped_300_l12", m_pPed_300_l12));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "Ped_300_l13", m_pPed_300_l13));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "Ped_300_l14", m_pPed_300_l14));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "Ped_300_l15", m_pPed_300_l15));
  
    //-----------------------------------------------------
    m_dumpEvent = false;
    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, DQMXmlHelper::readParameterValue(xmlHandle,
													     "DumpEvent", m_dumpEvent));

    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode HitMap::initModule()
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- init()" );

    // print directory structure of monitor element storage in console
    DQMModuleApi::cd(this);
    DQMModuleApi::ls(this, true);

    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode HitMap::endModule()
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- end()" );
    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode HitMap::processEvent(DQMEvent *pEvent)
  {

    int CycleNrIndex = 0;
    int BxIDIndex = 1;
    int EvtNrIndex = 2;
    int ChipIDIndex = 3;
    int NChannelsIndex = 4;
    int TDCFirstChannelIndex = 5;
    int ADCFirstChannelIndex = TDCFirstChannelIndex+36;


    EVENT::LCEvent *pLCEvent = pEvent->getEvent<EVENT::LCEvent>();

    if(!pLCEvent)
      return STATUS_CODE_FAILURE;

    if(m_dumpEvent)
      UTIL::LCTOOLS::dumpEvent(pLCEvent);


    const std::vector<std::string> *pCollectionNames = pLCEvent->getCollectionNames();

    for(std::vector<std::string>::const_iterator colIter = pCollectionNames->begin();
	colIter != pCollectionNames->end() ; ++colIter)
      {

	const std::string &collectionName(*colIter);

	EVENT::LCCollection *pLCCollection = pLCEvent->getCollection(collectionName);


	//----------------------------------
	// temperature section
	if(collectionName=="TempSensor")
	  {


	  }

	//----------------------------------
	// BIF section
	if(collectionName=="EUDAQDataBIF")
	  {
	    


	  }

	//----------------------------------
	// AHCAL section
	if(collectionName=="EUDAQDataScCAL")
	  {

	    if(pLCCollection->getTypeName() == EVENT::LCIO::LCGENERICOBJECT)
	      {

		const int nElements = pLCCollection->getNumberOfElements();
		for(int e=0 ; e<nElements ; e++)
		  {
		    const EVENT::LCGenericObject *const pAHCALRaw = 
		      dynamic_cast<const EVENT::LCGenericObject *const>(pLCCollection->getElementAt(e));

		    if(NULL == pAHCALRaw)
		      continue;

		    const int nChannels = pAHCALRaw->getIntVal(NChannelsIndex);
		    if(nChannels!= 36) {
		      LOG4CXX_INFO( dqmMainLogger , "Wrong number of channels ("<<nChannels<<"), skip event" ); 
		      continue;
		    }

		    for(int f=0 ; f<nChannels ; f++)		// This loop iterates over the channels in each readout cycle
		      {

			// Vectors for storing our TDC and ADC by channel

			int tdcRAW;
			int adcRAW;
			int tdc;
			int adc;
			int hitbit_tdc;
			int gainbit_tdc;
			int hitbit_adc;
			int gainbit_adc;

			tdcRAW = pAHCALRaw->getIntVal(TDCFirstChannelIndex+f);
			adcRAW = pAHCALRaw->getIntVal(ADCFirstChannelIndex+f);

			tdc = tdcRAW%4096;
			adc = adcRAW%4096;

			hitbit_adc = (adcRAW & 0x1000)?1:0;
			gainbit_adc = (adcRAW & 0x2000)?1:0;

			hitbit_tdc = (tdcRAW & 0x1000)?1:0;
			gainbit_tdc = (tdcRAW & 0x2000)?1:0;


			if( hitbit_adc != hitbit_tdc || pAHCALRaw->getIntVal(EvtNrIndex) ==0 ) continue;

			if(hitbit_adc != 1) continue;

		     
			int ijk = electronicsToIJK(pAHCALRaw->getIntVal(ChipIDIndex),f);
			int I = ijk / 10000;
			int J = ( ijk  % 10000 ) /100;
			int K = ( ijk  % 10000 ) % 100;
			if(adc>300) {
			  m_pMIP_300->get<TH3I>()->Fill(K,I,J,adc);
			  if(K==1) m_pMIP_300_l01->get<TH2I>()->Fill(I,J,adc);
			  if(K==2) m_pMIP_300_l02->get<TH2I>()->Fill(I,J,adc);
			  if(K==3) m_pMIP_300_l03->get<TH2I>()->Fill(I,J,adc);
			  if(K==4) m_pMIP_300_l04->get<TH2I>()->Fill(I,J,adc);
			  if(K==5) m_pMIP_300_l05->get<TH2I>()->Fill(I,J,adc);
			  if(K==6) m_pMIP_300_l06->get<TH2I>()->Fill(I,J,adc);
			  if(K==7) m_pMIP_300_l07->get<TH2I>()->Fill(I,J,adc);
			  if(K==8) m_pMIP_300_l08->get<TH2I>()->Fill(I,J,adc);
			  if(K==9) m_pMIP_300_l09->get<TH2I>()->Fill(I,J,adc);
			  if(K==10) m_pMIP_300_l10->get<TH2I>()->Fill(I,J,adc);
			  if(K==11) m_pMIP_300_l11->get<TH2I>()->Fill(I,J,adc);
			  if(K==12) m_pMIP_300_l12->get<TH2I>()->Fill(I,J,adc);
			  if(K==13) m_pMIP_300_l13->get<TH2I>()->Fill(I,J,adc);
			  if(K==14) m_pMIP_300_l14->get<TH2I>()->Fill(I,J,adc);
			  if(K==15) m_pMIP_300_l15->get<TH2I>()->Fill(I,J,adc);
			}

			if(adc<=300) {
			  m_pPed_300->get<TH3I>()->Fill(K,I,J,adc);
			  if(K==1) m_pPed_300_l01->get<TH2I>()->Fill(I,J,adc);
			  if(K==2) m_pPed_300_l02->get<TH2I>()->Fill(I,J,adc);
			  if(K==3) m_pPed_300_l03->get<TH2I>()->Fill(I,J,adc);
			  if(K==4) m_pPed_300_l04->get<TH2I>()->Fill(I,J,adc);
			  if(K==5) m_pPed_300_l05->get<TH2I>()->Fill(I,J,adc);
			  if(K==6) m_pPed_300_l06->get<TH2I>()->Fill(I,J,adc);
			  if(K==7) m_pPed_300_l07->get<TH2I>()->Fill(I,J,adc);
			  if(K==8) m_pPed_300_l08->get<TH2I>()->Fill(I,J,adc);
			  if(K==9) m_pPed_300_l09->get<TH2I>()->Fill(I,J,adc);
			  if(K==10) m_pPed_300_l10->get<TH2I>()->Fill(I,J,adc);
			  if(K==11) m_pPed_300_l11->get<TH2I>()->Fill(I,J,adc);
			  if(K==12) m_pPed_300_l12->get<TH2I>()->Fill(I,J,adc);
			  if(K==13) m_pPed_300_l13->get<TH2I>()->Fill(I,J,adc);
			  if(K==14) m_pPed_300_l14->get<TH2I>()->Fill(I,J,adc);
			  if(K==15) m_pPed_300_l15->get<TH2I>()->Fill(I,J,adc);
			}


		      }//for f

		  }//for elements

	      }// if LCGENERICOBJECT

	  }//if collectionName == EUDAQDataScCAL
      }// iterator


    return STATUS_CODE_SUCCESS;

  }

  //-------------------------------------------------------------------------------------------------

  StatusCode HitMap::startOfCycle()
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- startOfCycle()" );
    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode HitMap::endOfCycle()
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- endOfCycle()" );

    // run all quality tests on all monitor elements
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMModuleApi::runQualityTests(this));

    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode HitMap::startOfRun(DQMRun *pRun)
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- startOfRun()" );
    LOG4CXX_INFO( dqmMainLogger , "Run no " << pRun->getRunNumber() );
    //	time_t startTime = pRun->getStartTime();
    time_t startTime = std::chrono::system_clock::to_time_t(pRun->getStartTime());

    std::string timeStr;
    DQMCoreTool::timeToHMS(startTime, timeStr);

    LOG4CXX_INFO( dqmMainLogger , "Start time " << timeStr );
    LOG4CXX_INFO( dqmMainLogger , "Detector is " << pRun->getDetectorName() );
    LOG4CXX_INFO( dqmMainLogger , "Description " << pRun->getDescription() );

    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode HitMap::endOfRun(DQMRun *pRun)
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- endOfRun()" );
    LOG4CXX_INFO( dqmMainLogger , "Run no " << pRun->getRunNumber() );

    //	time_t endTime = pRun->getEndTime();
    time_t endTime = std::chrono::system_clock::to_time_t(pRun->getEndTime());
    std::string timeStr;
    DQMCoreTool::timeToHMS(endTime, timeStr);

    LOG4CXX_INFO( dqmMainLogger , "End time " << timeStr );

    return STATUS_CODE_SUCCESS;
  }



  StatusCode HitMap::buildGeometryMap(const TiXmlHandle xmlHandle)
  {

    LOG4CXX_INFO( dqmMainLogger , "Building geometry map..." );

    //Getting the very first child of the XML file; in our case, this is the dqm4hepGeometryMap bracket.
    const dqm4hep::TiXmlHandle xmlFileHandle(xmlHandle.FirstChildElement().Element());

    //Giving a unique name to the globalGeometryProperties object
    dqm4hep::TiXmlHandle pGlobalPropertiesXmlElement(xmlFileHandle.FirstChild("globalGeometryProperties").Element());

    //Iterate over each layer
    for (dqm4hep::TiXmlElement *pLayerXmlElement = xmlFileHandle.FirstChild("layer").Element(); NULL != pLayerXmlElement; pLayerXmlElement = pLayerXmlElement->NextSiblingElement("layer"))
      {

	dqm4hep::TiXmlHandle pLayerHandle(pLayerXmlElement);

	//Iterate over each chip
	for (dqm4hep::TiXmlElement *pChipXmlElement = pLayerHandle.FirstChild("chip").Element(); NULL != pChipXmlElement; pChipXmlElement = pChipXmlElement->NextSiblingElement("chip"))
	  {

	    dqm4hep::TiXmlHandle pChipHandle(pChipXmlElement);
	
	    //Iterate over each channel
	    for (dqm4hep::TiXmlElement *pChannelXmlElement = pChipHandle.FirstChild("channel").Element(); NULL != pChannelXmlElement; pChannelXmlElement = pChannelXmlElement->NextSiblingElement("channel"))
	      {

		int ChipID, ChannelID, I, J, K, ChpChnNum, ijkNum;

		//Pull out all the data: chip number, channel number, ijk
		pChipXmlElement->QueryValueAttribute<int>("id", &ChipID);
		pChannelXmlElement->QueryValueAttribute<int>("id", &ChannelID);
		pChannelXmlElement->QueryValueAttribute<int>("i", &I);
		pChannelXmlElement->QueryValueAttribute<int>("j", &J);
		pChannelXmlElement->QueryValueAttribute<int>("k", &K);

		//Formatting data to go into our map
		ChpChnNum = ChipID*100+ChannelID;
		ijkNum = I*10000 + J*100 + K;


		//Filling the map (Chip, Chn)->(I, J, K)
		ijkmap.insert(std::make_pair(ChpChnNum, ijkNum));

		//Filling the map (I, J, K)->(Chip, Chn)
		chpchnmap.insert(std::make_pair(ijkNum, ChpChnNum));

	      }
	  }
      }

    std::cout<<chpchnmap.size()<<" "<< ijkmap.size()<<std::endl;

    LOG4CXX_INFO( dqmMainLogger , "Geometry map built successfully." );

    return STATUS_CODE_SUCCESS;

  }

  int HitMap::electronicsToIJK(int Chip, int Channel)
  {
    std::map<int, int>::iterator itMap;
    int index = Chip*100+Channel;
    int IJK = -1;
    // std::cout<<"electronicsToIJK "<<ijkmap.size()<<std::endl;
    //std::cout<<index<<" "<<Chip<<" "<<Channel<<std::endl;

    if(ijkmap.find(index) != ijkmap.end())
      {
	itMap = ijkmap.find(index);
	IJK = itMap->second;
	//	std::cout<<"find: "<<IJK<<std::endl;
      }

    return IJK;
  }

  int HitMap::IJKToElectronics(int I, int J, int K)
  {
    std::map<int, int>::iterator itMap;
    int index = I*10000+J*100+K;
    int ChipChn= -1;

    if(chpchnmap.find(index) != chpchnmap.end())
      {
	itMap = chpchnmap.find(index);
	ChipChn = itMap->second;
      }

    return ChipChn;
  }

};



