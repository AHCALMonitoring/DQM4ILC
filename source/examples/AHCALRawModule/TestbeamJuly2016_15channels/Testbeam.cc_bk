
/// \file Testbeam.cc
/*
 *-------------------------------------------------------------
 * AHCALRawModule.cc source template automatically modified from 
 * CaloHitModule  generated by a class generator
 * by A. Irles, DESY, 23 March 2016
 *--------------------------------------------------------------
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "Testbeam.h"
// to handle and acces to the elements in the LCIO generic Object

// -- std headers
#include <ctime>
#include <cstdlib>
#include <limits>

//#ifndef USELCIO
//#define USELCIO
#include "EVENT/LCGenericObject.h"
#include "EVENT/LCCollection.h"
#include "EVENT/LCEvent.h"
#include "EVENT/LCIO.h"
#include "UTIL/CellIDDecoder.h"
#include "UTIL/LCTOOLS.h"
//#endif

// -- dqm4hep headers
#include "dqm4hep/DQMMonitorElement.h"
#include "dqm4hep/DQMCoreTool.h"
#include "dqm4hep/DQMRun.h"
#include "dqm4hep/DQMXmlHelper.h"
#include "dqm4hep/DQMEvent.h"
#include "dqm4hep/DQMQualityTest.h"
#include "dqm4hep/DQMModuleApi.h"
#include "dqm4hep/DQMPlugin.h"

// -- root headers
#include "TRandom.h"
#include "TString.h" // Added by Tom for TString handling


//using namespace lcio;

namespace dqm4hep
{
  // module plugin declaration
  DQM_PLUGIN_DECL( Testbeam , "Testbeam" )

  //-------------------------------------------------------------------------------------------------

  Testbeam::Testbeam() :
  DQMAnalysisModule()
  {
    setDetectorName("NO DETECTOR");
    setVersion(1, 0, 0);
  }

  //-------------------------------------------------------------------------------------------------

  Testbeam::~Testbeam()
  {
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode Testbeam::readSettings(const TiXmlHandle xmlHandle)
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- readSettings()" );


    //------------------------------------------------------
    // std::string m_ChannelsFileName = "";

    // RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, DQMXmlHelper::readParameterValue(xmlHandle,
    //                                                                                                          "ChannelsFileName", m_ChannelsFileName));

    // dqm4hep::TiXmlDocument m_channelsFile(m_ChannelsFileName);
    
    // if( ! m_channelsFile.LoadFile() )
    //   return dqm4hep::STATUS_CODE_FAILURE;

    // const dqm4hep::TiXmlHandle xmlChannelsFileHandle(&m_channelsFile);

    // RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, DQMXmlHelper::readParameterValue(xmlHandle, "ChannelNum", mxmlGeometryFileHandle));

    //-----------------------------

    m_ChannelNum = 0;
    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, 
                            DQMXmlHelper::readParameterValue(xmlHandle, "ChannelNum", m_ChannelNum));

    m_asicNr = 0;
    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, 
                            DQMXmlHelper::readParameterValue(xmlHandle, "asicNr", m_asicNr));

    //-----------------------------------------------------
    // channels, ADC & TDC
    // chan_1
    m_pADC_01 = NULL;
    m_pTDC_01 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_01", m_pADC_01));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_01", m_pTDC_01));
    // chan_2
    m_pADC_02 = NULL;
    m_pTDC_02 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_02", m_pADC_02));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_02", m_pTDC_02));
    // chan_3
    m_pADC_03 = NULL;
    m_pTDC_03 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_03", m_pADC_03));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_03", m_pTDC_03));
    // chan_4
    m_pADC_04 = NULL;
    m_pTDC_04 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_04", m_pADC_04));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_04", m_pTDC_04));
   // chan_5
    m_pADC_05 = NULL;
    m_pTDC_05 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_05", m_pADC_05));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_05", m_pTDC_05));
   // chan_6
    m_pADC_06 = NULL;
    m_pTDC_06 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_06", m_pADC_06));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_06", m_pTDC_06));
   // chan_7
    m_pADC_07 = NULL;
    m_pTDC_07 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_07", m_pADC_07));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_07", m_pTDC_07));
   // chan_8
    m_pADC_08 = NULL;
    m_pTDC_08 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_08", m_pADC_08));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_08", m_pTDC_08));
   // chan_9
    m_pADC_09 = NULL;
    m_pTDC_09 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_09", m_pADC_09));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_09", m_pTDC_09));
   // chan_10
    m_pADC_10 = NULL;
    m_pTDC_10 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_10", m_pADC_10));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_10", m_pTDC_10));
   // chan_11
    m_pADC_11 = NULL;
    m_pTDC_11 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_11", m_pADC_11));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_11", m_pTDC_11));
   // chan_12
    m_pADC_12 = NULL;
    m_pTDC_12 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_12", m_pADC_12));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_12", m_pTDC_12));
   // chan_13
    m_pADC_13 = NULL;
    m_pTDC_13 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_13", m_pADC_13));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_13", m_pTDC_13));
   // chan_14
    m_pADC_14 = NULL;
    m_pTDC_14 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_14", m_pADC_14));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_14", m_pTDC_14));
   // chan_15
    m_pADC_15 = NULL;
    m_pTDC_15 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_15", m_pADC_15));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_15", m_pTDC_15));
   
    //-----------------------------------------------------
    m_dumpEvent = false;
    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, DQMXmlHelper::readParameterValue(xmlHandle,
													     "DumpEvent", m_dumpEvent));

    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode Testbeam::initModule()
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- init()" );

    // print directory structure of monitor element storage in console
    DQMModuleApi::cd(this);
    DQMModuleApi::ls(this, true);

    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode Testbeam::endModule()
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- end()" );
    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode Testbeam::processEvent(DQMEvent *pEvent)
  {

    int CycleNrIndex = 0;
    int BxIDIndex = 1;
    int EvtNrIndex = 2;
    int ChipIDIndex = 3;
    int NChannelsIndex = 4;
    int TDCFirstChannelIndex = 5;
    int ADCFirstChannelIndex = TDCFirstChannelIndex+36;

    std::vector<int> asic_0 = {237,241,245,121,117,249,233,225,217,213,205,221,201,209,229};
    int asic[15];

    for(int i=0; i<15; i++) {
      if(m_asicNr==1) asic[i]=asic_0[i];
      if(m_asicNr==2) asic[i]=asic_0[i]+1;
      if(m_asicNr==3) asic[i]=asic_0[i]+2;
      if(m_asicNr==4) asic[i]=asic_0[i]+3;

    }

    EVENT::LCEvent *pLCEvent = pEvent->getEvent<EVENT::LCEvent>();

    if(!pLCEvent)
      return STATUS_CODE_FAILURE;

    if(m_dumpEvent)
      UTIL::LCTOOLS::dumpEvent(pLCEvent);


    const std::vector<std::string> *pCollectionNames = pLCEvent->getCollectionNames();

    for(std::vector<std::string>::const_iterator colIter = pCollectionNames->begin();
	colIter != pCollectionNames->end() ; ++colIter)
      {

	const std::string &collectionName(*colIter);

	EVENT::LCCollection *pLCCollection = pLCEvent->getCollection(collectionName);


	if(collectionName=="EUDAQDataScCAL")
	  {

	    if(pLCCollection->getTypeName() == EVENT::LCIO::LCGENERICOBJECT)
	      {

		const int nElements = pLCCollection->getNumberOfElements();
		for(int e=0 ; e<nElements ; e++)
		  {
		    const EVENT::LCGenericObject *const pAHCALRaw = 
		      dynamic_cast<const EVENT::LCGenericObject *const>(pLCCollection->getElementAt(e));

		    if(NULL == pAHCALRaw)
		      continue;

		    const int nChannels = pAHCALRaw->getIntVal(NChannelsIndex);
		    if(nChannels!= 36) {
		      LOG4CXX_INFO( dqmMainLogger , "Wrong number of channels ("<<nChannels<<"), skip event" ); 
		      continue;
		    }

		    for(int f=0 ; f<nChannels ; f++)		// This loop iterates over the channels in each readout cycle
		      {

			// Vectors for storing our TDC and ADC by channel

			int tdcRAW;
			int adcRAW;
			int tdc;
			int adc;
			int hitbit_tdc;
			int gainbit_tdc;
			int hitbit_adc;
			int gainbit_adc;

			tdcRAW = pAHCALRaw->getIntVal(TDCFirstChannelIndex+f);
			adcRAW = pAHCALRaw->getIntVal(ADCFirstChannelIndex+f);

			tdc = tdcRAW%4096;
			adc = adcRAW%4096;

			hitbit_adc = (adcRAW & 0x1000)?1:0;
			gainbit_adc = (adcRAW & 0x2000)?1:0;

			hitbit_tdc = (tdcRAW & 0x1000)?1:0;
			gainbit_tdc = (tdcRAW & 0x2000)?1:0;

			bool Ch=false; 

                        if(f == m_ChannelNum ) Ch=true;


			if( Ch == false || hitbit_adc!=1 || hitbit_adc != hitbit_tdc || pAHCALRaw->getIntVal(EvtNrIndex) == 0) continue;

			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic[0] )  {
			    m_pADC_01->get<TH1I>()->Fill(adc);
			    m_pTDC_01->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic[1] )  {
			    m_pADC_02->get<TH1I>()->Fill(adc);
			    m_pTDC_02->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic[2] )  {
			    m_pADC_03->get<TH1I>()->Fill(adc);
			    m_pTDC_03->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic[3] )  {
			    m_pADC_04->get<TH1I>()->Fill(adc);
			    m_pTDC_04->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic[4] )  {
			    m_pADC_05->get<TH1I>()->Fill(adc);
			    m_pTDC_05->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic[5] )  {
			    m_pADC_06->get<TH1I>()->Fill(adc);
			    m_pTDC_06->get<TH1I>()->Fill(tdc);
			}

			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic[6] )  {
			    m_pADC_07->get<TH1I>()->Fill(adc);
			    m_pTDC_07->get<TH1I>()->Fill(tdc);
			}

			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic[7] )  {
			    m_pADC_08->get<TH1I>()->Fill(adc);
			    m_pTDC_08->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic[8] )  {
			    m_pADC_09->get<TH1I>()->Fill(adc);
			    m_pTDC_09->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic[9] )  {
			    m_pADC_10->get<TH1I>()->Fill(adc);
			    m_pTDC_10->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic[10] )  {
			    m_pADC_11->get<TH1I>()->Fill(adc);
			    m_pTDC_11->get<TH1I>()->Fill(tdc);
			}

			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic[11] )  {
			    m_pADC_12->get<TH1I>()->Fill(adc);
			    m_pTDC_12->get<TH1I>()->Fill(tdc);
			}
 			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic[12] )  {
			    m_pADC_13->get<TH1I>()->Fill(adc);
			    m_pTDC_13->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic[13] )  {
			    m_pADC_14->get<TH1I>()->Fill(adc);
			    m_pTDC_14->get<TH1I>()->Fill(tdc);
			}

			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic[14] )  {
			    m_pADC_15->get<TH1I>()->Fill(adc);
			    m_pTDC_15->get<TH1I>()->Fill(tdc);
			}

			if(  pAHCALRaw->getIntVal(CycleNrIndex) % 1000 == 0 ) { //|| pAHCALRaw->getIntVal(CycleNrIndex) == 9000 ) {
			  std::cout <<m_pADC_01->get<TH1I>()->GetMean()<<std::endl;
			  std::cout <<m_pADC_02->get<TH1I>()->GetMean()<<std::endl;
			  std::cout <<m_pADC_03->get<TH1I>()->GetMean()<<std::endl;
			  std::cout <<m_pADC_04->get<TH1I>()->GetMean()<<std::endl;
			  std::cout <<m_pADC_05->get<TH1I>()->GetMean()<<std::endl;
			  std::cout <<m_pADC_06->get<TH1I>()->GetMean()<<std::endl;
			  std::cout <<m_pADC_07->get<TH1I>()->GetMean()<<std::endl;
			  std::cout <<m_pADC_08->get<TH1I>()->GetMean()<<std::endl;
			  std::cout <<m_pADC_09->get<TH1I>()->GetMean()<<std::endl;
			  std::cout <<m_pADC_10->get<TH1I>()->GetMean()<<std::endl;
			  std::cout <<m_pADC_11->get<TH1I>()->GetMean()<<std::endl;
			  std::cout <<m_pADC_12->get<TH1I>()->GetMean()<<std::endl;
			  std::cout <<m_pADC_13->get<TH1I>()->GetMean()<<std::endl;
			  std::cout <<m_pADC_14->get<TH1I>()->GetMean()<<std::endl;
			  std::cout <<m_pADC_15->get<TH1I>()->GetMean()<<std::endl;
			}



		      }//for f

		  }//for elements

	      }// if LCGENERICOBJECT

	  }//if collectionName == EUDAQDataScCAL
      }// iterator


    return STATUS_CODE_SUCCESS;

  }

  //-------------------------------------------------------------------------------------------------

  StatusCode Testbeam::startOfCycle()
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- startOfCycle()" );
    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode Testbeam::endOfCycle()
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- endOfCycle()" );


    // run all quality tests on all monitor elements
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMModuleApi::runQualityTests(this));

    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode Testbeam::startOfRun(DQMRun *pRun)
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- startOfRun()" );
    LOG4CXX_INFO( dqmMainLogger , "Run no " << pRun->getRunNumber() );
    //	time_t startTime = pRun->getStartTime();
    time_t startTime = std::chrono::system_clock::to_time_t(pRun->getStartTime());

    std::string timeStr;
    DQMCoreTool::timeToHMS(startTime, timeStr);

    LOG4CXX_INFO( dqmMainLogger , "Start time " << timeStr );
    LOG4CXX_INFO( dqmMainLogger , "Detector is " << pRun->getDetectorName() );
    LOG4CXX_INFO( dqmMainLogger , "Description " << pRun->getDescription() );

    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode Testbeam::endOfRun(DQMRun *pRun)
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- endOfRun()" );
    LOG4CXX_INFO( dqmMainLogger , "Run no " << pRun->getRunNumber() );

    std::cout <<m_pADC_01->get<TH1I>()->GetMean()<<std::endl;
    std::cout <<m_pADC_02->get<TH1I>()->GetMean()<<std::endl;
    std::cout <<m_pADC_03->get<TH1I>()->GetMean()<<std::endl;
    std::cout <<m_pADC_04->get<TH1I>()->GetMean()<<std::endl;
    std::cout <<m_pADC_05->get<TH1I>()->GetMean()<<std::endl;
    std::cout <<m_pADC_06->get<TH1I>()->GetMean()<<std::endl;
    std::cout <<m_pADC_07->get<TH1I>()->GetMean()<<std::endl;
    std::cout <<m_pADC_08->get<TH1I>()->GetMean()<<std::endl;
    std::cout <<m_pADC_09->get<TH1I>()->GetMean()<<std::endl;
    std::cout <<m_pADC_10->get<TH1I>()->GetMean()<<std::endl;
    std::cout <<m_pADC_11->get<TH1I>()->GetMean()<<std::endl;
    std::cout <<m_pADC_12->get<TH1I>()->GetMean()<<std::endl;
    std::cout <<m_pADC_13->get<TH1I>()->GetMean()<<std::endl;
    std::cout <<m_pADC_14->get<TH1I>()->GetMean()<<std::endl;
    std::cout <<m_pADC_15->get<TH1I>()->GetMean()<<std::endl;

    //	time_t endTime = pRun->getEndTime();
    time_t endTime = std::chrono::system_clock::to_time_t(pRun->getEndTime());
    std::string timeStr;
    DQMCoreTool::timeToHMS(endTime, timeStr);

    LOG4CXX_INFO( dqmMainLogger , "End time " << timeStr );

    return STATUS_CODE_SUCCESS;
  }

};

