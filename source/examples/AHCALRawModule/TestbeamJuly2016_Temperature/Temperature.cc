
/// \file Temperatures.cc
/*
 *-------------------------------------------------------------
 * AHCALRawModule.cc source template automatically modified from 
 * CaloHitModule  generated by a class generator
 * by A. Irles, DESY, 23 March 2016
 *--------------------------------------------------------------
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "Temperature.h"
// to handle and acces to the elements in the LCIO generic Object

// -- std headers
#include <ctime>
#include <time.h>
#include <time.h>
#include <locale>
#include <cstdlib>
#include <limits>
#include <string>

//#ifndef USELCIO
//#define USELCIO
#include "EVENT/LCGenericObject.h"
#include "EVENT/LCCollection.h"
#include "EVENT/LCEvent.h"
#include "EVENT/LCIO.h"
#include "UTIL/CellIDDecoder.h"
#include "UTIL/LCTOOLS.h"
//#endif

// -- dqm4hep headers
#include "dqm4hep/DQMMonitorElement.h"
#include "dqm4hep/DQMCoreTool.h"
#include "dqm4hep/DQMRun.h"
#include "dqm4hep/DQMXmlHelper.h"
#include "dqm4hep/DQMEvent.h"
#include "dqm4hep/DQMQualityTest.h"
#include "dqm4hep/DQMModuleApi.h"
#include "dqm4hep/DQMPlugin.h"

// -- root headers
#include "TRandom.h"
#include "TString.h" // Added by Tom for TString handling
#include "TDatime.h"

//using namespace lcio;

namespace dqm4hep
{
  // module plugin declaration
  DQM_PLUGIN_DECL( Temperature , "Temperature" )

  //-------------------------------------------------------------------------------------------------

  Temperature::Temperature() :
  DQMAnalysisModule()
  {
    setDetectorName("NO DETECTOR");
    setVersion(1, 0, 0);
  }

  //-------------------------------------------------------------------------------------------------

  Temperature::~Temperature()
  {
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode Temperature::readSettings(const TiXmlHandle xmlHandle)
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- readSettings()" );


    //----


    // TEMPERATURE
    m_pTempAverage_1 = NULL;
    m_pTempAverage_2 = NULL;
    m_pTempAverage_3 = NULL;
    m_pTempAverage_4 = NULL;
    m_pTempAverage_5 = NULL;
    m_pTempAverage_6 = NULL;
    m_pTempAverage_7 = NULL;
    m_pTempAverage_8 = NULL;
    m_pTempAverage_9 = NULL;
    m_pTempAverage_10 = NULL;
    m_pTempAverage_11 = NULL;
    m_pTempAverage_12 = NULL;
    m_pTempAverage_13 = NULL;
    m_pTempAverage_14 = NULL;
    m_pTempAverage_15 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempAverage_1", m_pTempAverage_1));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempAverage_2", m_pTempAverage_2));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempAverage_3", m_pTempAverage_3));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempAverage_4", m_pTempAverage_4));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempAverage_5", m_pTempAverage_5));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempAverage_6", m_pTempAverage_6));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempAverage_7", m_pTempAverage_7));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempAverage_8", m_pTempAverage_8));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempAverage_9", m_pTempAverage_9));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempAverage_10", m_pTempAverage_10));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempAverage_11", m_pTempAverage_11));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempAverage_12", m_pTempAverage_12));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempAverage_13", m_pTempAverage_13));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempAverage_14", m_pTempAverage_14));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempAverage_15", m_pTempAverage_15));

    // DIF
    m_pTempDIF_1 = NULL;
    m_pTempDIF_2 = NULL;
    m_pTempDIF_3 = NULL;
    m_pTempDIF_4 = NULL;
    m_pTempDIF_5 = NULL;
    m_pTempDIF_6 = NULL;
    m_pTempDIF_7 = NULL;
    m_pTempDIF_8 = NULL;
    m_pTempDIF_9 = NULL;
    m_pTempDIF_10 = NULL;
    m_pTempDIF_11 = NULL;
    m_pTempDIF_12 = NULL;
    m_pTempDIF_13 = NULL;
    m_pTempDIF_14 = NULL;
    m_pTempDIF_15 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempDIF_1", m_pTempDIF_1));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempDIF_2", m_pTempDIF_2));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempDIF_3", m_pTempDIF_3));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempDIF_4", m_pTempDIF_4));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempDIF_5", m_pTempDIF_5));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempDIF_6", m_pTempDIF_6));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempDIF_7", m_pTempDIF_7));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempDIF_8", m_pTempDIF_8));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempDIF_9", m_pTempDIF_9));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempDIF_10", m_pTempDIF_10));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempDIF_11", m_pTempDIF_11));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempDIF_12", m_pTempDIF_12));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempDIF_13", m_pTempDIF_13));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempDIF_14", m_pTempDIF_14));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempDIF_15", m_pTempDIF_15));

    // PWR
    m_pTempPWR_1 = NULL;
    m_pTempPWR_2 = NULL;
    m_pTempPWR_3 = NULL;
    m_pTempPWR_4 = NULL;
    m_pTempPWR_5 = NULL;
    m_pTempPWR_6 = NULL;
    m_pTempPWR_7 = NULL;
    m_pTempPWR_8 = NULL;
    m_pTempPWR_9 = NULL;
    m_pTempPWR_10 = NULL;
    m_pTempPWR_11 = NULL;
    m_pTempPWR_12 = NULL;
    m_pTempPWR_13 = NULL;
    m_pTempPWR_14 = NULL;
    m_pTempPWR_15 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempPWR_1", m_pTempPWR_1));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempPWR_2", m_pTempPWR_2));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempPWR_3", m_pTempPWR_3));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempPWR_4", m_pTempPWR_4));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempPWR_5", m_pTempPWR_5));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempPWR_6", m_pTempPWR_6));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempPWR_7", m_pTempPWR_7));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempPWR_8", m_pTempPWR_8));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempPWR_9", m_pTempPWR_9));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempPWR_10", m_pTempPWR_10));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempPWR_11", m_pTempPWR_11));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempPWR_12", m_pTempPWR_12));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempPWR_13", m_pTempPWR_13));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempPWR_14", m_pTempPWR_14));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempPWR_15", m_pTempPWR_15));



    //-----------------------------------------------------
    m_dumpEvent = false;
    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, DQMXmlHelper::readParameterValue(xmlHandle,
													     "DumpEvent", m_dumpEvent));

    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode Temperature::initModule()
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- init()" );

    // print directory structure of monitor element storage in console
    DQMModuleApi::cd(this);
    DQMModuleApi::ls(this, true);

    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode Temperature::endModule()
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- end()" );
    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode Temperature::processEvent(DQMEvent *pEvent)
  {

    int CycleNrIndex = 0;
    int BxIDIndex = 1;
    int EvtNrIndex = 2;
    int ChipIDIndex = 3;
    int NChannelsIndex = 4;
    int TDCFirstChannelIndex = 5;
    int ADCFirstChannelIndex = TDCFirstChannelIndex+36;


    EVENT::LCEvent *pLCEvent = pEvent->getEvent<EVENT::LCEvent>();

    if(!pLCEvent)
      return STATUS_CODE_FAILURE;

    if(m_dumpEvent)
      UTIL::LCTOOLS::dumpEvent(pLCEvent);


    const std::vector<std::string> *pCollectionNames = pLCEvent->getCollectionNames();

    time_t ts =0;
    int timestamp;
    float tdif_1, tdif_2, tdif_3, tdif_4, tdif_5, tdif_6, tdif_7, tdif_8, tdif_9, tdif_10, tdif_11, tdif_12, tdif_13, tdif_14, tdif_15;
    float tpwr_1, tpwr_2, tpwr_3, tpwr_4, tpwr_5, tpwr_6, tpwr_7, tpwr_8, tpwr_9, tpwr_10, tpwr_11, tpwr_12, tpwr_13, tpwr_14, tpwr_15;
    float tav_1, tav_2, tav_3, tav_4, tav_5, tav_6, tav_7, tav_8, tav_9, tav_10, tav_11, tav_12, tav_13, tav_14, tav_15;

    for(std::vector<std::string>::const_iterator colIter = pCollectionNames->begin();
	colIter != pCollectionNames->end() ; ++colIter)
      {

	const std::string &collectionName(*colIter);

	EVENT::LCCollection *pLCCollection = pLCEvent->getCollection(collectionName);


	//----------------------------------
	// temperature section
	if(collectionName=="TempSensor")
	  {

	    const int nElements = pLCCollection->getNumberOfElements();
	    //   if(nElements !=3) continue;

	    //   std::string timestamp = pLCCollection->getParameters().getStringVal("Timestamp");
	    //  struct tm tm;
	    //  strptime(timestamp.c_str(), "%a, %d %b %Y %H:%M:%S %z", &tm);
	    //  time_t epoch;
	    //  epoch = mktime(&tm);
	    long64 epoch = pLCEvent->getTimeStamp();
	    

	    for(int e=0 ; e<nElements ; e++)
	      {
		const EVENT::LCGenericObject *const pTempRaw = 
		  dynamic_cast<const EVENT::LCGenericObject *const>(pLCCollection->getElementAt(e));
		
		if(NULL == pTempRaw)
		  continue;
		
		if(e==0) {tdif_1 = pTempRaw->getIntVal(8); tpwr_1 = pTempRaw->getIntVal(9);}
		if(e==1) {tdif_2 = pTempRaw->getIntVal(8); tpwr_2 = pTempRaw->getIntVal(9);}
		if(e==2) {tdif_3 = pTempRaw->getIntVal(8); tpwr_3 = pTempRaw->getIntVal(9);}
		if(e==3) {tdif_4 = pTempRaw->getIntVal(8); tpwr_4 = pTempRaw->getIntVal(9);}
		if(e==4) {tdif_5 = pTempRaw->getIntVal(8); tpwr_5 = pTempRaw->getIntVal(9);}
		if(e==5) {tdif_6 = pTempRaw->getIntVal(8); tpwr_6 = pTempRaw->getIntVal(9);}
		if(e==6) {tdif_7 = pTempRaw->getIntVal(8); tpwr_7 = pTempRaw->getIntVal(9);}
		if(e==7) {tdif_8 = pTempRaw->getIntVal(8); tpwr_8 = pTempRaw->getIntVal(9);}
		if(e==8) {tdif_9 = pTempRaw->getIntVal(8); tpwr_9 = pTempRaw->getIntVal(9);}
		if(e==9) {tdif_10 = pTempRaw->getIntVal(8); tpwr_10 = pTempRaw->getIntVal(9);}
		if(e==10) {tdif_11 = pTempRaw->getIntVal(8); tpwr_11 = pTempRaw->getIntVal(9);}
		if(e==11) {tdif_12 = pTempRaw->getIntVal(8); tpwr_12 = pTempRaw->getIntVal(9);}
		if(e==12) {tdif_13 = pTempRaw->getIntVal(8); tpwr_13 = pTempRaw->getIntVal(9);}
		if(e==13) {tdif_14 = pTempRaw->getIntVal(8); tpwr_14 = pTempRaw->getIntVal(9);}
		if(e==14) {tdif_15 = pTempRaw->getIntVal(8); tpwr_15 = pTempRaw->getIntVal(9);}

		int ntemps=0, tempav=0;
		for(int i=0; i<6; i++) { 
		  if(pTempRaw->getIntVal(2+i) < 1000) {ntemps++; tempav+=pTempRaw->getIntVal(2+i);}  
		}

		tempav=tempav/ntemps;
		if(e==0) tav_1=tempav/10.;
		if(e==1) tav_2=tempav/10.;
		if(e==2) tav_3=tempav/10.;
		if(e==3) tav_4=tempav/10.;
		if(e==4) tav_5=tempav/10.;
		if(e==5) tav_6=tempav/10.;
		if(e==6) tav_7=tempav/10.;
		if(e==7) tav_8=tempav/10.;
		if(e==8) tav_9=tempav/10.;
		if(e==9) tav_10=tempav/10.;
		if(e==10) tav_11=tempav/10.;
		if(e==11) tav_12=tempav/10.;
		if(e==12) tav_13=tempav/10.;
		if(e==13) tav_14=tempav/10.;
		if(e==14) tav_15=tempav/10.;

	      }

	    Int_t pointID = m_pTempAverage_1->get<TGraph>()->GetN();
	    m_pTempAverage_1->get<TGraph>()->SetPoint(pointID, int(epoch), tav_1 );
	    pointID = m_pTempAverage_2->get<TGraph>()->GetN();
	    m_pTempAverage_2->get<TGraph>()->SetPoint(pointID, int(epoch), tav_2 );
	    pointID = m_pTempAverage_3->get<TGraph>()->GetN();
	    m_pTempAverage_3->get<TGraph>()->SetPoint(pointID, int(epoch), tav_3 );
	    pointID = m_pTempAverage_4->get<TGraph>()->GetN();
	    m_pTempAverage_4->get<TGraph>()->SetPoint(pointID, int(epoch), tav_4 );
	    pointID = m_pTempAverage_5->get<TGraph>()->GetN();
	    m_pTempAverage_5->get<TGraph>()->SetPoint(pointID, int(epoch), tav_5 );
	    pointID = m_pTempAverage_6->get<TGraph>()->GetN();
	    m_pTempAverage_6->get<TGraph>()->SetPoint(pointID, int(epoch), tav_6 );
	    pointID = m_pTempAverage_7->get<TGraph>()->GetN();
	    m_pTempAverage_7->get<TGraph>()->SetPoint(pointID, int(epoch), tav_7 );
	    pointID = m_pTempAverage_8->get<TGraph>()->GetN();
	    m_pTempAverage_8->get<TGraph>()->SetPoint(pointID, int(epoch), tav_8 );
	    pointID = m_pTempAverage_9->get<TGraph>()->GetN();
	    m_pTempAverage_9->get<TGraph>()->SetPoint(pointID, int(epoch), tav_9 );
	    pointID = m_pTempAverage_10->get<TGraph>()->GetN();
	    m_pTempAverage_10->get<TGraph>()->SetPoint(pointID, int(epoch), tav_10 );
	    pointID = m_pTempAverage_11->get<TGraph>()->GetN();
	    m_pTempAverage_11->get<TGraph>()->SetPoint(pointID, int(epoch), tav_11 );
	    pointID = m_pTempAverage_12->get<TGraph>()->GetN();
	    m_pTempAverage_12->get<TGraph>()->SetPoint(pointID, int(epoch), tav_12 );
	    pointID = m_pTempAverage_13->get<TGraph>()->GetN();
	    m_pTempAverage_13->get<TGraph>()->SetPoint(pointID, int(epoch), tav_13 );
	    pointID = m_pTempAverage_14->get<TGraph>()->GetN();
	    m_pTempAverage_14->get<TGraph>()->SetPoint(pointID, int(epoch), tav_14 );
	    pointID = m_pTempAverage_15->get<TGraph>()->GetN();
	    m_pTempAverage_15->get<TGraph>()->SetPoint(pointID, int(epoch), tav_15 );

	    pointID = m_pTempDIF_1->get<TGraph>()->GetN();
	    m_pTempDIF_1->get<TGraph>()->SetPoint(pointID, int(epoch), tdif_1 );
	    pointID = m_pTempDIF_2->get<TGraph>()->GetN();
	    m_pTempDIF_2->get<TGraph>()->SetPoint(pointID, int(epoch), tdif_2 );
	    pointID = m_pTempDIF_3->get<TGraph>()->GetN();
	    m_pTempDIF_3->get<TGraph>()->SetPoint(pointID, int(epoch), tdif_3 );
	    pointID = m_pTempDIF_4->get<TGraph>()->GetN();
	    m_pTempDIF_4->get<TGraph>()->SetPoint(pointID, int(epoch), tdif_4 );
	    pointID = m_pTempDIF_5->get<TGraph>()->GetN();
	    m_pTempDIF_5->get<TGraph>()->SetPoint(pointID, int(epoch), tdif_5 );
	    pointID = m_pTempDIF_6->get<TGraph>()->GetN();
	    m_pTempDIF_6->get<TGraph>()->SetPoint(pointID, int(epoch), tdif_6 );
	    pointID = m_pTempDIF_7->get<TGraph>()->GetN();
	    m_pTempDIF_7->get<TGraph>()->SetPoint(pointID, int(epoch), tdif_7 );
	    pointID = m_pTempDIF_8->get<TGraph>()->GetN();
	    m_pTempDIF_8->get<TGraph>()->SetPoint(pointID, int(epoch), tdif_8 );
	    pointID = m_pTempDIF_9->get<TGraph>()->GetN();
	    m_pTempDIF_9->get<TGraph>()->SetPoint(pointID, int(epoch), tdif_9 );
	    pointID = m_pTempDIF_10->get<TGraph>()->GetN();
	    m_pTempDIF_10->get<TGraph>()->SetPoint(pointID, int(epoch), tdif_10 );
	    pointID = m_pTempDIF_11->get<TGraph>()->GetN();
	    m_pTempDIF_11->get<TGraph>()->SetPoint(pointID, int(epoch), tdif_11 );
	    pointID = m_pTempDIF_12->get<TGraph>()->GetN();
	    m_pTempDIF_12->get<TGraph>()->SetPoint(pointID, int(epoch), tdif_12 );
	    pointID = m_pTempDIF_13->get<TGraph>()->GetN();
	    m_pTempDIF_13->get<TGraph>()->SetPoint(pointID, int(epoch), tdif_13 );
	    pointID = m_pTempDIF_14->get<TGraph>()->GetN();
	    m_pTempDIF_14->get<TGraph>()->SetPoint(pointID, int(epoch), tdif_14 );
	    pointID = m_pTempDIF_15->get<TGraph>()->GetN();
	    m_pTempDIF_15->get<TGraph>()->SetPoint(pointID, int(epoch), tdif_15 );

	    pointID = m_pTempPWR_1->get<TGraph>()->GetN();
	    m_pTempPWR_1->get<TGraph>()->SetPoint(pointID, int(epoch), tpwr_1 );
	    pointID = m_pTempPWR_2->get<TGraph>()->GetN();
	    m_pTempPWR_2->get<TGraph>()->SetPoint(pointID, int(epoch), tpwr_2 );
	    pointID = m_pTempPWR_3->get<TGraph>()->GetN();
	    m_pTempPWR_3->get<TGraph>()->SetPoint(pointID, int(epoch), tpwr_3 );
	    pointID = m_pTempPWR_4->get<TGraph>()->GetN();
	    m_pTempPWR_4->get<TGraph>()->SetPoint(pointID, int(epoch), tpwr_4 );
	    pointID = m_pTempPWR_5->get<TGraph>()->GetN();
	    m_pTempPWR_5->get<TGraph>()->SetPoint(pointID, int(epoch), tpwr_5 );
	    pointID = m_pTempPWR_6->get<TGraph>()->GetN();
	    m_pTempPWR_6->get<TGraph>()->SetPoint(pointID, int(epoch), tpwr_6 );
	    pointID = m_pTempPWR_7->get<TGraph>()->GetN();
	    m_pTempPWR_7->get<TGraph>()->SetPoint(pointID, int(epoch), tpwr_7 );
	    pointID = m_pTempPWR_8->get<TGraph>()->GetN();
	    m_pTempPWR_8->get<TGraph>()->SetPoint(pointID, int(epoch), tpwr_8 );
	    pointID = m_pTempPWR_9->get<TGraph>()->GetN();
	    m_pTempPWR_9->get<TGraph>()->SetPoint(pointID, int(epoch), tpwr_9 );
	    pointID = m_pTempPWR_10->get<TGraph>()->GetN();
	    m_pTempPWR_10->get<TGraph>()->SetPoint(pointID, int(epoch), tpwr_10 );
	    pointID = m_pTempPWR_11->get<TGraph>()->GetN();
	    m_pTempPWR_11->get<TGraph>()->SetPoint(pointID, int(epoch), tpwr_11 );
	    pointID = m_pTempPWR_12->get<TGraph>()->GetN();
	    m_pTempPWR_12->get<TGraph>()->SetPoint(pointID, int(epoch), tpwr_12 );
	    pointID = m_pTempPWR_13->get<TGraph>()->GetN();
	    m_pTempPWR_13->get<TGraph>()->SetPoint(pointID, int(epoch), tpwr_13 );
	    pointID = m_pTempPWR_14->get<TGraph>()->GetN();
	    m_pTempPWR_14->get<TGraph>()->SetPoint(pointID, int(epoch), tpwr_14 );
	    pointID = m_pTempPWR_15->get<TGraph>()->GetN();
	    m_pTempPWR_15->get<TGraph>()->SetPoint(pointID, int(epoch), tpwr_15 );




	  }

	//----------------------------------
	// BIF section
	if(collectionName=="EUDAQDataBIF")
	  {
	    


	  }

	//----------------------------------
	// AHCAL section
	if(collectionName=="EUDAQDataScCAL")
	  {

	  }//if collectionName == EUDAQDataScCAL

      }// iterator


    return STATUS_CODE_SUCCESS;

  }

  //-------------------------------------------------------------------------------------------------

  StatusCode Temperature::startOfCycle()
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- startOfCycle()" );
    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode Temperature::endOfCycle()
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- endOfCycle()" );

    // run all quality tests on all monitor elements
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMModuleApi::runQualityTests(this));

    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode Temperature::startOfRun(DQMRun *pRun)
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- startOfRun()" );
    LOG4CXX_INFO( dqmMainLogger , "Run no " << pRun->getRunNumber() );
    //	time_t startTime = pRun->getStartTime();
    time_t startTime = std::chrono::system_clock::to_time_t(pRun->getStartTime());

    std::string timeStr;
    DQMCoreTool::timeToHMS(startTime, timeStr);

    LOG4CXX_INFO( dqmMainLogger , "Start time " << timeStr );
    LOG4CXX_INFO( dqmMainLogger , "Detector is " << pRun->getDetectorName() );
    LOG4CXX_INFO( dqmMainLogger , "Description " << pRun->getDescription() );

    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode Temperature::endOfRun(DQMRun *pRun)
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- endOfRun()" );
    LOG4CXX_INFO( dqmMainLogger , "Run no " << pRun->getRunNumber() );

    //	time_t endTime = pRun->getEndTime();
    time_t endTime = std::chrono::system_clock::to_time_t(pRun->getEndTime());
    std::string timeStr;
    DQMCoreTool::timeToHMS(endTime, timeStr);

    LOG4CXX_INFO( dqmMainLogger , "End time " << timeStr );

    return STATUS_CODE_SUCCESS;
  }



};



