/// \file TimeCorrelation.cc
/*
 *-------------------------------------------------------------
 * AHCALRawModule.cc source template automatically modified from 
 * CaloHitModule  generated by a class generator
 * by A. Irles, DESY, 23 March 2016
 *--------------------------------------------------------------
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "TimeCorrelation.h"
// to handle and acces to the elements in the LCIO generic Object

// -- std headers
#include <ctime>
#include <cstdlib>
#include <limits>
#include <map>
#include <vector>

//#ifndef USELCIO
//#define USELCIO
#include "EVENT/LCGenericObject.h"
#include "EVENT/LCCollection.h"
#include "EVENT/LCEvent.h"
#include "EVENT/LCIO.h"
#include "UTIL/CellIDDecoder.h"
#include "UTIL/LCTOOLS.h"
//#endif

// -- dqm4hep headers
#include "dqm4hep/DQMMonitorElement.h"
#include "dqm4hep/DQMCoreTool.h"
#include "dqm4hep/DQMRun.h"
#include "dqm4hep/DQMXmlHelper.h"
#include "dqm4hep/DQMEvent.h"
#include "dqm4hep/DQMQualityTest.h"
#include "dqm4hep/DQMModuleApi.h"
#include "dqm4hep/DQMPlugin.h"

// -- root headers
#include "TRandom.h"
#include "TString.h" // Added by Tom for TString handling

//BIF PARAMETERS
#define BIF_START_ACQ 0x03000000
#define BIF_STOP_ACQ 0x02000000
#define BIF_OFFSET 0
#define BIF_BINNING 5120
#define BIF_RESOLUTION 0.78125

//BIF LEMO Connection definition 
#define BIF_1ST_LEMO 0x1000000
#define BIF_2ND_LEMO 0x1010000
#define BIF_3RD_LEMO 0x1020000
#define BIF_4TH_LEMO 0x1030000

//using namespace lcio;

namespace dqm4hep
{
  // module plugin declaration
  DQM_PLUGIN_DECL( TimeCorrelation , "TimeCorrelation" )

  //-------------------------------------------------------------------------------------------------

  TimeCorrelation::TimeCorrelation() :
  DQMAnalysisModule()
  {
    setDetectorName("NO DETECTOR");
    setVersion(1, 0, 0);
  }

  //-------------------------------------------------------------------------------------------------

  TimeCorrelation::~TimeCorrelation()
  {
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode TimeCorrelation::readSettings(const TiXmlHandle xmlHandle)
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- readSettings()" );

    m_bifoffset = 0;
    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, 
                            DQMXmlHelper::readParameterValue(xmlHandle, "bifoffset", m_bifoffset));
    // ############### option_a
    // channels, ADC & TDC
    // chan_1
    m_pTDCvsTime_01_a = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_01_a", m_pTDCvsTime_01_a));
    // chan_2
    m_pTDCvsTime_02_a = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_02_a", m_pTDCvsTime_02_a));
    // chan_3
    m_pTDCvsTime_03_a = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_03_a", m_pTDCvsTime_03_a));
    // chan_4
    m_pTDCvsTime_04_a = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_04_a", m_pTDCvsTime_04_a));
    // chan_5
    m_pTDCvsTime_05_a = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_05_a", m_pTDCvsTime_05_a));
    // chan_6
    m_pTDCvsTime_06_a = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_06_a", m_pTDCvsTime_06_a));
    // chan_7
    m_pTDCvsTime_07_a = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_07_a", m_pTDCvsTime_07_a));
    // chan_8
    m_pTDCvsTime_08_a = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_08_a", m_pTDCvsTime_08_a));
    // chan_9
    m_pTDCvsTime_09_a = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_09_a", m_pTDCvsTime_09_a));
    // chan_10
    m_pTDCvsTime_10_a = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_10_a", m_pTDCvsTime_10_a));
    // chan_11
    m_pTDCvsTime_11_a = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_11_a", m_pTDCvsTime_11_a));
    // chan_12
    m_pTDCvsTime_12_a = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_12_a", m_pTDCvsTime_12_a));
    // chan_13
    m_pTDCvsTime_13_a = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_13_a", m_pTDCvsTime_13_a));
    // chan_14
    m_pTDCvsTime_14_a = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_14_a", m_pTDCvsTime_14_a));
    // chan_15
    m_pTDCvsTime_15_a = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_15_a", m_pTDCvsTime_15_a));

    // ############### option_b
    // channels, ADC & TDC
    // chan_1
    m_pTDCvsTime_01_b = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_01_b", m_pTDCvsTime_01_b));
    // chan_2
    m_pTDCvsTime_02_b = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_02_b", m_pTDCvsTime_02_b));
    // chan_3
    m_pTDCvsTime_03_b = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_03_b", m_pTDCvsTime_03_b));
    // chan_4
    m_pTDCvsTime_04_b = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_04_b", m_pTDCvsTime_04_b));
    // chan_5
    m_pTDCvsTime_05_b = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_05_b", m_pTDCvsTime_05_b));
    // chan_6
    m_pTDCvsTime_06_b = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_06_b", m_pTDCvsTime_06_b));
    // chan_7
    m_pTDCvsTime_07_b = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_07_b", m_pTDCvsTime_07_b));
    // chan_8
    m_pTDCvsTime_08_b = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_08_b", m_pTDCvsTime_08_b));
    // chan_9
    m_pTDCvsTime_09_b = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_09_b", m_pTDCvsTime_09_b));
    // chan_10
    m_pTDCvsTime_10_b = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_10_b", m_pTDCvsTime_10_b));
    // chan_11
    m_pTDCvsTime_11_b = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_11_b", m_pTDCvsTime_11_b));
    // chan_12
    m_pTDCvsTime_12_b = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_12_b", m_pTDCvsTime_12_b));
    // chan_13
    m_pTDCvsTime_13_b = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_13_b", m_pTDCvsTime_13_b));
    // chan_14
    m_pTDCvsTime_14_b = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_14_b", m_pTDCvsTime_14_b));
    // chan_15
    m_pTDCvsTime_15_b = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_15_b", m_pTDCvsTime_15_b));

    // ############### option_c
    // channels, ADC & TDC
    // chan_1
    m_pTDCvsTime_01_c = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_01_c", m_pTDCvsTime_01_c));
    // chan_2
    m_pTDCvsTime_02_c = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_02_c", m_pTDCvsTime_02_c));
    // chan_3
    m_pTDCvsTime_03_c = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_03_c", m_pTDCvsTime_03_c));
    // chan_4
    m_pTDCvsTime_04_c = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_04_c", m_pTDCvsTime_04_c));
    // chan_5
    m_pTDCvsTime_05_c = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_05_c", m_pTDCvsTime_05_c));
    // chan_6
    m_pTDCvsTime_06_c = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_06_c", m_pTDCvsTime_06_c));
    // chan_7
    m_pTDCvsTime_07_c = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_07_c", m_pTDCvsTime_07_c));
    // chan_8
    m_pTDCvsTime_08_c = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_08_c", m_pTDCvsTime_08_c));
    // chan_9
    m_pTDCvsTime_09_c = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_09_c", m_pTDCvsTime_09_c));
    // chan_10
    m_pTDCvsTime_10_c = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_10_c", m_pTDCvsTime_10_c));
    // chan_11
    m_pTDCvsTime_11_c = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_11_c", m_pTDCvsTime_11_c));
    // chan_12
    m_pTDCvsTime_12_c = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_12_c", m_pTDCvsTime_12_c));
    // chan_13
    m_pTDCvsTime_13_c = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_13_c", m_pTDCvsTime_13_c));
    // chan_14
    m_pTDCvsTime_14_c = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_14_c", m_pTDCvsTime_14_c));
    // chan_15
    m_pTDCvsTime_15_c = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_15_c", m_pTDCvsTime_15_c));

    // ############### option_d
    // channels, ADC & TDC
    // chan_1
    m_pTDCvsTime_01_d = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_01_d", m_pTDCvsTime_01_d));
    // chan_2
    m_pTDCvsTime_02_d = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_02_d", m_pTDCvsTime_02_d));
    // chan_3
    m_pTDCvsTime_03_d = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_03_d", m_pTDCvsTime_03_d));
    // chan_4
    m_pTDCvsTime_04_d = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_04_d", m_pTDCvsTime_04_d));
    // chan_5
    m_pTDCvsTime_05_d = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_05_d", m_pTDCvsTime_05_d));
    // chan_6
    m_pTDCvsTime_06_d = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_06_d", m_pTDCvsTime_06_d));
    // chan_7
    m_pTDCvsTime_07_d = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_07_d", m_pTDCvsTime_07_d));
    // chan_8
    m_pTDCvsTime_08_d = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_08_d", m_pTDCvsTime_08_d));
    // chan_9
    m_pTDCvsTime_09_d = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_09_d", m_pTDCvsTime_09_d));
    // chan_10
    m_pTDCvsTime_10_d = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_10_d", m_pTDCvsTime_10_d));
    // chan_11
    m_pTDCvsTime_11_d = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_11_d", m_pTDCvsTime_11_d));
    // chan_12
    m_pTDCvsTime_12_d = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_12_d", m_pTDCvsTime_12_d));
    // chan_13
    m_pTDCvsTime_13_d = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_13_d", m_pTDCvsTime_13_d));
    // chan_14
    m_pTDCvsTime_14_d = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_14_d", m_pTDCvsTime_14_d));
    // chan_15
    m_pTDCvsTime_15_d = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDCvsTime_15_d", m_pTDCvsTime_15_d));


    //-----------------------------------------------------
    m_dumpEvent = false;
    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, DQMXmlHelper::readParameterValue(xmlHandle,
													     "DumpEvent", m_dumpEvent));

    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode TimeCorrelation::initModule()
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- init()" );

    // print directory structure of monitor element storage in console
    DQMModuleApi::cd(this);
    DQMModuleApi::ls(this, true);

    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode TimeCorrelation::endModule()
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- end()" );
    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode TimeCorrelation::processEvent(DQMEvent *pEvent)
  {

    int EventCntIndex = 1;
    int BxIDIndex = 1;
    int EvtNrIndex = 2;
    int ChipIDIndex = 3;
    int NChannelsIndex = 4;
    int TDCFirstChannelIndex = 5;
    int ADCFirstChannelIndex = TDCFirstChannelIndex+36;

    std::vector<int> asic_default = {237,241,245,121,117,249,233,225,217,213,205,221,201,209,229};

    int asic_a[15];
    int asic_b[15];
    int asic_c[15];
    int asic_d[15];

    for(int i=0; i<15; i++) {
      asic_a[i]=asic_default[i];
      asic_b[i]=asic_default[i] + 1;
      asic_c[i]=asic_default[i] + 2;
      asic_d[i]=asic_default[i] + 3;
    }

    EVENT::LCEvent *pLCEvent = pEvent->getEvent<EVENT::LCEvent>();

    if(!pLCEvent)
      return STATUS_CODE_FAILURE;

    if(m_dumpEvent)
      UTIL::LCTOOLS::dumpEvent(pLCEvent);


    const std::vector<std::string> *pCollectionNames = pLCEvent->getCollectionNames();

    //map to make the bxid sorting per readout cycle of the ahcal raw data
    std::map< int, std::vector< std::vector<int> > > rData;        
    // the bif data is already sorted
    std::vector<int>  rBIF;
    std::vector< std::vector<int> > new_rBIF;

    unsigned long long int TimeStamp_start = 0;//BIF Start Timestamp
    unsigned long long int TimeStamp_stop = 0;//BIF Stop Timestamp

    for(std::vector<std::string>::const_iterator colIter = pCollectionNames->begin();
	colIter != pCollectionNames->end() ; ++colIter)
      {

	const std::string &collectionName(*colIter);

	EVENT::LCCollection *pLCCollection = pLCEvent->getCollection(collectionName);


	// --------------------------------------------------------------------


	if(collectionName=="EUDAQDataBIF")
	  {

	    if(pLCCollection->getTypeName() == EVENT::LCIO::LCGENERICOBJECT)
	      {
		const EVENT::LCGenericObject *const pBIFRaw = 
		  dynamic_cast<const EVENT::LCGenericObject *const>(pLCCollection->getElementAt(0));

		if(NULL == pBIFRaw)
		  continue;

		//Check Start and Stop
		unsigned int start_acq = (unsigned int)pBIFRaw->getIntVal(0);
		unsigned int stop_acq = (unsigned int)pBIFRaw->getIntVal(pBIFRaw->getNInt() - 4);
		    
	    
		if( ((start_acq)&0xFF000000) != BIF_START_ACQ )
		  {
		    LOG4CXX_INFO( dqmMainLogger , "Problem with the start acquisition of the BIF "<<pBIFRaw->getIntVal(1)<<" " ); 
		    continue;
		  }
		    
		if( ((stop_acq)&0xFF000000) != BIF_STOP_ACQ )
		  {
		    LOG4CXX_INFO( dqmMainLogger , "Problem with the stop acquisition of the BIF, skip cycle "<<pBIFRaw->getIntVal(1)<<" " );
		    continue;
		  }
		    
		    
		//Get Timestamp start
		unsigned int start_TS_low = (unsigned int)pBIFRaw->getIntVal(2);
		unsigned int start_TS_high = (unsigned int)pBIFRaw->getIntVal(3);

		TimeStamp_start = ( (unsigned long long int)start_TS_high<<32 | start_TS_low );
		    
		//Get Timestamp stop
		unsigned int stop_TS_low = (unsigned int)pBIFRaw->getIntVal(pBIFRaw->getNInt() - 2);
		unsigned int stop_TS_high = (unsigned int)pBIFRaw->getIntVal(pBIFRaw->getNInt() - 1);
		TimeStamp_stop = ( (unsigned long long int)stop_TS_high<<32 | stop_TS_low );
		    
		// std::cout << " BIF Block - Start Time : " << TimeStamp_start << std::endl 
		//			 << " - Stop Time : " << TimeStamp_stop << std::endl 
		//			 << " Acq time : " << TimeStamp_stop - TimeStamp_start << std::endl;
		    
		    
		for(int i = 4; i < pBIFRaw->getNInt() - 4; i++)
		  {
		    rBIF.push_back(pBIFRaw->getIntVal(i));
		  }

		//Divide original vector in N vector corresponding to N triggers of the BIF each of a size of 4
		unsigned int nTrigger = (int)rBIF.size()/4;
		//  std::cout << "Number of BIF Trigger in the ROC " <<  pBIFRaw->getIntVal(1)
		//	      << " : " << nTrigger << std::endl;
		    
		new_rBIF.resize(nTrigger);
		for(unsigned int i = 0; i < nTrigger; i++)
		  {
		    new_rBIF[i].resize(4);
		    for(unsigned int ii = 0; ii < 4; ii++)
		      {
			new_rBIF[i][ii] = rBIF.at(4*i + ii);
		      }
		  }
		    
		rBIF.clear();
		    
	      }
	  }

	// --------------------------------------------------------------------


	if(collectionName=="EUDAQDataScCAL")
	  {

	    if(pLCCollection->getTypeName() == EVENT::LCIO::LCGENERICOBJECT)
	      {

		const int nElements = pLCCollection->getNumberOfElements();
		for(int e=0 ; e<nElements ; e++)
		  {
		    const EVENT::LCGenericObject *const pAHCALRaw = 
		      dynamic_cast<const EVENT::LCGenericObject *const>(pLCCollection->getElementAt(e));

		    if(NULL == pAHCALRaw)
		      continue;

		    const int nChannels = pAHCALRaw->getIntVal(NChannelsIndex);
		    if(nChannels!= 36) {
		      LOG4CXX_INFO( dqmMainLogger , "Wrong number of channels ("<<nChannels<<"), skip event" ); 
		      continue;
		    }

		    //fill the map with all entries
		    int bxid = pAHCALRaw->getIntVal(BxIDIndex);
		    std::vector<int> rawdata;
		    for(int iraw=0; iraw < pAHCALRaw->getNInt(); iraw++) rawdata.push_back(pAHCALRaw->getIntVal(iraw));
		    rData[bxid].push_back(rawdata);
		    rawdata.clear();

		  }//for elements
	
	      }// if LCGENERICOBJECT

	  }//if collectionName == EUDAQDataScCAL


	
	//bxid sorting
	for(std::map< int, std::vector< std::vector<int> > >::iterator it=rData.begin(); it!=rData.end();++it)
	  {


	    // std::cout<<it->first<<" "<<  it->second.size() <<std::endl;
	    // std::cout<<new_rBIF.size() <<std::endl;

	    //Create new BIF Blocks
	    for(unsigned int ibif = 0; ibif  < new_rBIF.size(); ibif++)
	      {
		int source = -1;
		unsigned int TriggerSource = (unsigned int)new_rBIF[ibif].at(0);
		
		if( ((TriggerSource)&0xFFF0000) == BIF_1ST_LEMO )
		  source = 0;
		if( ((TriggerSource)&0xFFF0000) == BIF_2ND_LEMO )
		  source = 1;
		if( ((TriggerSource)&0xFFF0000) == BIF_3RD_LEMO )
		  source = 2;
		if( ((TriggerSource)&0xFFF0000) == BIF_4TH_LEMO )
		  source = 3;
		
		unsigned int TS_low = (unsigned int)new_rBIF[ibif].at(2);
		unsigned int TS_high = (unsigned int)new_rBIF[ibif].at(3);
		unsigned long long int TimeStamp = ( (unsigned long long int)TS_high<<32 | TS_low );
		

		//	int m_bifoffset = 73170;
		//Relative time to start acquisition
		unsigned long long int RelativeTime = TimeStamp - TimeStamp_start;
		//BXID of the Trigger
		int BXID_BIF = (int)(RelativeTime - m_bifoffset)/BIF_BINNING;
		//Time of the Trigger
		float Time_BIF = (float)((RelativeTime - m_bifoffset)%BIF_BINNING * BIF_RESOLUTION);
				

		for (unsigned int iraw = 0; iraw < it->second.size(); iraw++ )
		  {


		    for(int f=0 ; f<36 ; f++)            // 
                      {
			
			int tdcRAW = it->second.at(iraw)[TDCFirstChannelIndex+f];
			int adcRAW = it->second.at(iraw)[ADCFirstChannelIndex+f];
			
			int tdc = tdcRAW%4096;
			int adc = adcRAW%4096;
			
			int hitbit_adc = (adcRAW & 0x1000)?1:0;
			int gainbit_adc = (adcRAW & 0x2000)?1:0;
			
			int hitbit_tdc = (tdcRAW & 0x1000)?1:0;
			int gainbit_tdc = (tdcRAW & 0x2000)?1:0;
			
			
			if(it->first == BXID_BIF && hitbit_adc==hitbit_tdc && gainbit_adc==gainbit_tdc && hitbit_adc==1 && adc > 0) {

			  //asic 1 ---------------------------------------------------------------
			  if(it->second.at(iraw)[ChipIDIndex]==asic_a[0]) {
			    Int_t pointID = m_pTDCvsTime_01_a->get<TGraph>()->GetN();
			    m_pTDCvsTime_01_a->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_a[1]) {
			    Int_t pointID = m_pTDCvsTime_02_a->get<TGraph>()->GetN();
			    m_pTDCvsTime_02_a->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_a[2]) {
			    Int_t pointID = m_pTDCvsTime_03_a->get<TGraph>()->GetN();
			    m_pTDCvsTime_03_a->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_a[3]) {
			    Int_t pointID = m_pTDCvsTime_04_a->get<TGraph>()->GetN();
			    m_pTDCvsTime_04_a->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_a[4]) {
			    Int_t pointID = m_pTDCvsTime_05_a->get<TGraph>()->GetN();
			    m_pTDCvsTime_05_a->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_a[5]) {
			    Int_t pointID = m_pTDCvsTime_06_a->get<TGraph>()->GetN();
			    m_pTDCvsTime_06_a->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_a[6]) {
			    Int_t pointID = m_pTDCvsTime_07_a->get<TGraph>()->GetN();
			    m_pTDCvsTime_07_a->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_a[7]) {
			    Int_t pointID = m_pTDCvsTime_08_a->get<TGraph>()->GetN();
			    m_pTDCvsTime_08_a->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_a[8]) {
			    Int_t pointID = m_pTDCvsTime_09_a->get<TGraph>()->GetN();
			    m_pTDCvsTime_09_a->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_a[9]) {
			    Int_t pointID = m_pTDCvsTime_10_a->get<TGraph>()->GetN();
			    m_pTDCvsTime_10_a->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_a[10]) {
			    Int_t pointID = m_pTDCvsTime_11_a->get<TGraph>()->GetN();
			    m_pTDCvsTime_11_a->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_a[11]) {
			    Int_t pointID = m_pTDCvsTime_12_a->get<TGraph>()->GetN();
			    m_pTDCvsTime_12_a->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_a[12]) {
			    Int_t pointID = m_pTDCvsTime_13_a->get<TGraph>()->GetN();
			    m_pTDCvsTime_13_a->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_a[13]) {
			    Int_t pointID = m_pTDCvsTime_14_a->get<TGraph>()->GetN();
			    m_pTDCvsTime_14_a->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_a[14]) {
			    Int_t pointID = m_pTDCvsTime_15_a->get<TGraph>()->GetN();
			    m_pTDCvsTime_15_a->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }

			  //asic 2 ---------------------------------------------------------------
			  if(it->second.at(iraw)[ChipIDIndex]==asic_b[0]) {
			    Int_t pointID = m_pTDCvsTime_01_b->get<TGraph>()->GetN();
			    m_pTDCvsTime_01_b->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_b[1]) {
			    Int_t pointID = m_pTDCvsTime_02_b->get<TGraph>()->GetN();
			    m_pTDCvsTime_02_b->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_b[2]) {
			    Int_t pointID = m_pTDCvsTime_03_b->get<TGraph>()->GetN();
			    m_pTDCvsTime_03_b->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_b[3]) {
			    Int_t pointID = m_pTDCvsTime_04_b->get<TGraph>()->GetN();
			    m_pTDCvsTime_04_b->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_b[4]) {
			    Int_t pointID = m_pTDCvsTime_05_b->get<TGraph>()->GetN();
			    m_pTDCvsTime_05_b->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_b[5]) {
			    Int_t pointID = m_pTDCvsTime_06_b->get<TGraph>()->GetN();
			    m_pTDCvsTime_06_b->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_b[6]) {
			    Int_t pointID = m_pTDCvsTime_07_b->get<TGraph>()->GetN();
			    m_pTDCvsTime_07_b->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_b[7]) {
			    Int_t pointID = m_pTDCvsTime_08_b->get<TGraph>()->GetN();
			    m_pTDCvsTime_08_b->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_b[8]) {
			    Int_t pointID = m_pTDCvsTime_09_b->get<TGraph>()->GetN();
			    m_pTDCvsTime_09_b->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_b[9]) {
			    Int_t pointID = m_pTDCvsTime_10_b->get<TGraph>()->GetN();
			    m_pTDCvsTime_10_b->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_b[10]) {
			    Int_t pointID = m_pTDCvsTime_11_b->get<TGraph>()->GetN();
			    m_pTDCvsTime_11_b->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_b[11]) {
			    Int_t pointID = m_pTDCvsTime_12_b->get<TGraph>()->GetN();
			    m_pTDCvsTime_12_b->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_b[12]) {
			    Int_t pointID = m_pTDCvsTime_13_b->get<TGraph>()->GetN();
			    m_pTDCvsTime_13_b->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_b[13]) {
			    Int_t pointID = m_pTDCvsTime_14_b->get<TGraph>()->GetN();
			    m_pTDCvsTime_14_b->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_b[14]) {
			    Int_t pointID = m_pTDCvsTime_15_b->get<TGraph>()->GetN();
			    m_pTDCvsTime_15_b->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }

			  //asic 3 ---------------------------------------------------------------
			  if(it->second.at(iraw)[ChipIDIndex]==asic_c[0]) {
			    Int_t pointID = m_pTDCvsTime_01_c->get<TGraph>()->GetN();
			    m_pTDCvsTime_01_c->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_c[1]) {
			    Int_t pointID = m_pTDCvsTime_02_c->get<TGraph>()->GetN();
			    m_pTDCvsTime_02_c->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_c[2]) {
			    Int_t pointID = m_pTDCvsTime_03_c->get<TGraph>()->GetN();
			    m_pTDCvsTime_03_c->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_c[3]) {
			    Int_t pointID = m_pTDCvsTime_04_c->get<TGraph>()->GetN();
			    m_pTDCvsTime_04_c->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_c[4]) {
			    Int_t pointID = m_pTDCvsTime_05_c->get<TGraph>()->GetN();
			    m_pTDCvsTime_05_c->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_c[5]) {
			    Int_t pointID = m_pTDCvsTime_06_c->get<TGraph>()->GetN();
			    m_pTDCvsTime_06_c->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_c[6]) {
			    Int_t pointID = m_pTDCvsTime_07_c->get<TGraph>()->GetN();
			    m_pTDCvsTime_07_c->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_c[7]) {
			    Int_t pointID = m_pTDCvsTime_08_c->get<TGraph>()->GetN();
			    m_pTDCvsTime_08_c->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_c[8]) {
			    Int_t pointID = m_pTDCvsTime_09_c->get<TGraph>()->GetN();
			    m_pTDCvsTime_09_c->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_c[9]) {
			    Int_t pointID = m_pTDCvsTime_10_c->get<TGraph>()->GetN();
			    m_pTDCvsTime_10_c->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_c[10]) {
			    Int_t pointID = m_pTDCvsTime_11_c->get<TGraph>()->GetN();
			    m_pTDCvsTime_11_c->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_c[11]) {
			    Int_t pointID = m_pTDCvsTime_12_c->get<TGraph>()->GetN();
			    m_pTDCvsTime_12_c->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_c[12]) {
			    Int_t pointID = m_pTDCvsTime_13_c->get<TGraph>()->GetN();
			    m_pTDCvsTime_13_c->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_c[13]) {
			    Int_t pointID = m_pTDCvsTime_14_c->get<TGraph>()->GetN();
			    m_pTDCvsTime_14_c->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_c[14]) {
			    Int_t pointID = m_pTDCvsTime_15_c->get<TGraph>()->GetN();
			    m_pTDCvsTime_15_c->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }

			  //asic 4 ---------------------------------------------------------------
			  if(it->second.at(iraw)[ChipIDIndex]==asic_d[0]) {
			    Int_t pointID = m_pTDCvsTime_01_d->get<TGraph>()->GetN();
			    m_pTDCvsTime_01_d->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_d[1]) {
			    Int_t pointID = m_pTDCvsTime_02_d->get<TGraph>()->GetN();
			    m_pTDCvsTime_02_d->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_d[2]) {
			    Int_t pointID = m_pTDCvsTime_03_d->get<TGraph>()->GetN();
			    m_pTDCvsTime_03_d->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_d[3]) {
			    Int_t pointID = m_pTDCvsTime_04_d->get<TGraph>()->GetN();
			    m_pTDCvsTime_04_d->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_d[4]) {
			    Int_t pointID = m_pTDCvsTime_05_d->get<TGraph>()->GetN();
			    m_pTDCvsTime_05_d->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_d[5]) {
			    Int_t pointID = m_pTDCvsTime_06_d->get<TGraph>()->GetN();
			    m_pTDCvsTime_06_d->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_d[6]) {
			    Int_t pointID = m_pTDCvsTime_07_d->get<TGraph>()->GetN();
			    m_pTDCvsTime_07_d->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_d[7]) {
			    Int_t pointID = m_pTDCvsTime_08_d->get<TGraph>()->GetN();
			    m_pTDCvsTime_08_d->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_d[8]) {
			    Int_t pointID = m_pTDCvsTime_09_d->get<TGraph>()->GetN();
			    m_pTDCvsTime_09_d->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_d[9]) {
			    Int_t pointID = m_pTDCvsTime_10_d->get<TGraph>()->GetN();
			    m_pTDCvsTime_10_d->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_d[10]) {
			    Int_t pointID = m_pTDCvsTime_11_d->get<TGraph>()->GetN();
			    m_pTDCvsTime_11_d->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_d[11]) {
			    Int_t pointID = m_pTDCvsTime_12_d->get<TGraph>()->GetN();
			    m_pTDCvsTime_12_d->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_d[12]) {
			    Int_t pointID = m_pTDCvsTime_13_d->get<TGraph>()->GetN();
			    m_pTDCvsTime_13_d->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_d[13]) {
			    Int_t pointID = m_pTDCvsTime_14_d->get<TGraph>()->GetN();
			    m_pTDCvsTime_14_d->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }
			  if(it->second.at(iraw)[ChipIDIndex]==asic_d[14]) {
			    Int_t pointID = m_pTDCvsTime_15_d->get<TGraph>()->GetN();
			    m_pTDCvsTime_15_d->get<TGraph>()->SetPoint(pointID, Time_BIF, tdc );
			  }

			}
		      }
		  }

	      }//if new_rBIF size

	  } // end iterating over map elements

      }// iterator

    rData.clear();
    new_rBIF.clear();


    return STATUS_CODE_SUCCESS;

  }

  //-------------------------------------------------------------------------------------------------

  StatusCode TimeCorrelation::startOfCycle()
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- startOfCycle()" );
    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode TimeCorrelation::endOfCycle()
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- endOfCycle()" );

    // run all quality tests on all monitor elements
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMModuleApi::runQualityTests(this));

    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode TimeCorrelation::startOfRun(DQMRun *pRun)
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- startOfRun()" );
    LOG4CXX_INFO( dqmMainLogger , "Run no " << pRun->getRunNumber() );
    //	time_t startTime = pRun->getStartTime();
    time_t startTime = std::chrono::system_clock::to_time_t(pRun->getStartTime());

    std::string timeStr;
    DQMCoreTool::timeToHMS(startTime, timeStr);

    LOG4CXX_INFO( dqmMainLogger , "Start time " << timeStr );
    LOG4CXX_INFO( dqmMainLogger , "Detector is " << pRun->getDetectorName() );
    LOG4CXX_INFO( dqmMainLogger , "Description " << pRun->getDescription() );

    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode TimeCorrelation::endOfRun(DQMRun *pRun)
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- endOfRun()" );
    LOG4CXX_INFO( dqmMainLogger , "Run no " << pRun->getRunNumber() );

    //	time_t endTime = pRun->getEndTime();
    time_t endTime = std::chrono::system_clock::to_time_t(pRun->getEndTime());
    std::string timeStr;
    DQMCoreTool::timeToHMS(endTime, timeStr);

    LOG4CXX_INFO( dqmMainLogger , "End time " << timeStr );

    return STATUS_CODE_SUCCESS;
  }

};

