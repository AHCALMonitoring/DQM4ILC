/// \file Testbeam.cc
/*
 *-------------------------------------------------------------
 * AHCALRawModule.cc source template automatically modified from 
 * CaloHitModule  generated by a class generator
 * by A. Irles, DESY, 23 March 2016
 *--------------------------------------------------------------
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "Testbeam.h"
// to handle and acces to the elements in the LCIO generic Object

// -- std headers
#include <ctime>
#include <cstdlib>
#include <limits>

//#ifndef USELCIO
//#define USELCIO
#include "EVENT/LCGenericObject.h"
#include "EVENT/LCCollection.h"
#include "EVENT/LCEvent.h"
#include "EVENT/LCIO.h"
#include "UTIL/CellIDDecoder.h"
#include "UTIL/LCTOOLS.h"
//#endif

// -- dqm4hep headers
#include "dqm4hep/DQMMonitorElement.h"
#include "dqm4hep/DQMCoreTool.h"
#include "dqm4hep/DQMRun.h"
#include "dqm4hep/DQMXmlHelper.h"
#include "dqm4hep/DQMEvent.h"
#include "dqm4hep/DQMQualityTest.h"
#include "dqm4hep/DQMModuleApi.h"
#include "dqm4hep/DQMPlugin.h"

// -- root headers
#include "TRandom.h"
#include "TString.h" // Added by Tom for TString handling


//using namespace lcio;

namespace dqm4hep
{
  // module plugin declaration
  DQM_PLUGIN_DECL( Testbeam , "Testbeam" )

  //-------------------------------------------------------------------------------------------------

  Testbeam::Testbeam() :
  DQMAnalysisModule()
  {
    setDetectorName("NO DETECTOR");
    setVersion(1, 0, 0);
  }

  //-------------------------------------------------------------------------------------------------

  Testbeam::~Testbeam()
  {
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode Testbeam::readSettings(const TiXmlHandle xmlHandle)
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- readSettings()" );

    //---------------------------------------------------------------------------------------------
    // ############### option_a
    // channels, ADC & TDC
    // chan_1
    m_pADC_01_a = NULL;
    m_pTDC_01_a = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_01_a", m_pADC_01_a));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_01_a", m_pTDC_01_a));
    // chan_2
    m_pADC_02_a = NULL;
    m_pTDC_02_a = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_02_a", m_pADC_02_a));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_02_a", m_pTDC_02_a));
    // chan_3
    m_pADC_03_a = NULL;
    m_pTDC_03_a = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_03_a", m_pADC_03_a));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_03_a", m_pTDC_03_a));
    // chan_4
    m_pADC_04_a = NULL;
    m_pTDC_04_a = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_04_a", m_pADC_04_a));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_04_a", m_pTDC_04_a));
   // chan_5
    m_pADC_05_a = NULL;
    m_pTDC_05_a = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_05_a", m_pADC_05_a));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_05_a", m_pTDC_05_a));
   // chan_6
    m_pADC_06_a = NULL;
    m_pTDC_06_a = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_06_a", m_pADC_06_a));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_06_a", m_pTDC_06_a));
   // chan_7
    m_pADC_07_a = NULL;
    m_pTDC_07_a = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_07_a", m_pADC_07_a));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_07_a", m_pTDC_07_a));
   // chan_8
    m_pADC_08_a = NULL;
    m_pTDC_08_a = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_08_a", m_pADC_08_a));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_08_a", m_pTDC_08_a));
   // chan_9
    m_pADC_09_a = NULL;
    m_pTDC_09_a = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_09_a", m_pADC_09_a));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_09_a", m_pTDC_09_a));
   // chan_10
    m_pADC_10_a = NULL;
    m_pTDC_10_a = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_10_a", m_pADC_10_a));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_10_a", m_pTDC_10_a));
   // chan_11
    m_pADC_11_a = NULL;
    m_pTDC_11_a = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_11_a", m_pADC_11_a));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_11_a", m_pTDC_11_a));
   // chan_12
    m_pADC_12_a = NULL;
    m_pTDC_12_a = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_12_a", m_pADC_12_a));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_12_a", m_pTDC_12_a));
   // chan_13
    m_pADC_13_a = NULL;
    m_pTDC_13_a = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_13_a", m_pADC_13_a));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_13_a", m_pTDC_13_a));
   // chan_14
    m_pADC_14_a = NULL;
    m_pTDC_14_a = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_14_a", m_pADC_14_a));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_14_a", m_pTDC_14_a));
   // chan_15
    m_pADC_15_a = NULL;
    m_pTDC_15_a = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_15_a", m_pADC_15_a));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_15_a", m_pTDC_15_a));

    //---------------------------------------------------------------------------------------------
    // ############### option_b
    // channels, ADC & TDC
    // chan_1
    m_pADC_01_b = NULL;
    m_pTDC_01_b = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_01_b", m_pADC_01_b));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_01_b", m_pTDC_01_b));
    // chan_2
    m_pADC_02_b = NULL;
    m_pTDC_02_b = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_02_b", m_pADC_02_b));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_02_b", m_pTDC_02_b));
    // chan_3
    m_pADC_03_b = NULL;
    m_pTDC_03_b = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_03_b", m_pADC_03_b));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_03_b", m_pTDC_03_b));
    // chan_4
    m_pADC_04_b = NULL;
    m_pTDC_04_b = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_04_b", m_pADC_04_b));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_04_b", m_pTDC_04_b));
   // chan_5
    m_pADC_05_b = NULL;
    m_pTDC_05_b = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_05_b", m_pADC_05_b));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_05_b", m_pTDC_05_b));
   // chan_6
    m_pADC_06_b = NULL;
    m_pTDC_06_b = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_06_b", m_pADC_06_b));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_06_b", m_pTDC_06_b));
   // chan_7
    m_pADC_07_b = NULL;
    m_pTDC_07_b = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_07_b", m_pADC_07_b));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_07_b", m_pTDC_07_b));
   // chan_8
    m_pADC_08_b = NULL;
    m_pTDC_08_b = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_08_b", m_pADC_08_b));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_08_b", m_pTDC_08_b));
   // chan_9
    m_pADC_09_b = NULL;
    m_pTDC_09_b = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_09_b", m_pADC_09_b));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_09_b", m_pTDC_09_b));
   // chan_10
    m_pADC_10_b = NULL;
    m_pTDC_10_b = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_10_b", m_pADC_10_b));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_10_b", m_pTDC_10_b));
   // chan_11
    m_pADC_11_b = NULL;
    m_pTDC_11_b = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_11_b", m_pADC_11_b));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_11_b", m_pTDC_11_b));
   // chan_12
    m_pADC_12_b = NULL;
    m_pTDC_12_b = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_12_b", m_pADC_12_b));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_12_b", m_pTDC_12_b));
   // chan_13
    m_pADC_13_b = NULL;
    m_pTDC_13_b = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_13_b", m_pADC_13_b));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_13_b", m_pTDC_13_b));
   // chan_14
    m_pADC_14_b = NULL;
    m_pTDC_14_b = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_14_b", m_pADC_14_b));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_14_b", m_pTDC_14_b));
   // chan_15
    m_pADC_15_b = NULL;
    m_pTDC_15_b = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_15_b", m_pADC_15_b));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_15_b", m_pTDC_15_b));

    //---------------------------------------------------------------------------------------------
    // ############### option_c
    // channels, ADC & TDC
    // chan_1
    m_pADC_01_c = NULL;
    m_pTDC_01_c = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_01_c", m_pADC_01_c));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_01_c", m_pTDC_01_c));
    // chan_2
    m_pADC_02_c = NULL;
    m_pTDC_02_c = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_02_c", m_pADC_02_c));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_02_c", m_pTDC_02_c));
    // chan_3
    m_pADC_03_c = NULL;
    m_pTDC_03_c = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_03_c", m_pADC_03_c));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_03_c", m_pTDC_03_c));
    // chan_4
    m_pADC_04_c = NULL;
    m_pTDC_04_c = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_04_c", m_pADC_04_c));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_04_c", m_pTDC_04_c));
   // chan_5
    m_pADC_05_c = NULL;
    m_pTDC_05_c = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_05_c", m_pADC_05_c));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_05_c", m_pTDC_05_c));
   // chan_6
    m_pADC_06_c = NULL;
    m_pTDC_06_c = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_06_c", m_pADC_06_c));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_06_c", m_pTDC_06_c));
   // chan_7
    m_pADC_07_c = NULL;
    m_pTDC_07_c = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_07_c", m_pADC_07_c));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_07_c", m_pTDC_07_c));
   // chan_8
    m_pADC_08_c = NULL;
    m_pTDC_08_c = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_08_c", m_pADC_08_c));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_08_c", m_pTDC_08_c));
   // chan_9
    m_pADC_09_c = NULL;
    m_pTDC_09_c = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_09_c", m_pADC_09_c));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_09_c", m_pTDC_09_c));
   // chan_10
    m_pADC_10_c = NULL;
    m_pTDC_10_c = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_10_c", m_pADC_10_c));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_10_c", m_pTDC_10_c));
   // chan_11
    m_pADC_11_c = NULL;
    m_pTDC_11_c = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_11_c", m_pADC_11_c));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_11_c", m_pTDC_11_c));
   // chan_12
    m_pADC_12_c = NULL;
    m_pTDC_12_c = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_12_c", m_pADC_12_c));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_12_c", m_pTDC_12_c));
   // chan_13
    m_pADC_13_c = NULL;
    m_pTDC_13_c = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_13_c", m_pADC_13_c));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_13_c", m_pTDC_13_c));
   // chan_14
    m_pADC_14_c = NULL;
    m_pTDC_14_c = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_14_c", m_pADC_14_c));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_14_c", m_pTDC_14_c));
   // chan_15
    m_pADC_15_c = NULL;
    m_pTDC_15_c = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_15_c", m_pADC_15_c));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_15_c", m_pTDC_15_c));

    //---------------------------------------------------------------------------------------------
    // ############### option_d
    // channels, ADC & TDC
    // chan_1
    m_pADC_01_d = NULL;
    m_pTDC_01_d = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_01_d", m_pADC_01_d));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_01_d", m_pTDC_01_d));
    // chan_2
    m_pADC_02_d = NULL;
    m_pTDC_02_d = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_02_d", m_pADC_02_d));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_02_d", m_pTDC_02_d));
    // chan_3
    m_pADC_03_d = NULL;
    m_pTDC_03_d = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_03_d", m_pADC_03_d));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_03_d", m_pTDC_03_d));
    // chan_4
    m_pADC_04_d = NULL;
    m_pTDC_04_d = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_04_d", m_pADC_04_d));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_04_d", m_pTDC_04_d));
   // chan_5
    m_pADC_05_d = NULL;
    m_pTDC_05_d = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_05_d", m_pADC_05_d));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_05_d", m_pTDC_05_d));
   // chan_6
    m_pADC_06_d = NULL;
    m_pTDC_06_d = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_06_d", m_pADC_06_d));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_06_d", m_pTDC_06_d));
   // chan_7
    m_pADC_07_d = NULL;
    m_pTDC_07_d = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_07_d", m_pADC_07_d));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_07_d", m_pTDC_07_d));
   // chan_8
    m_pADC_08_d = NULL;
    m_pTDC_08_d = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_08_d", m_pADC_08_d));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_08_d", m_pTDC_08_d));
   // chan_9
    m_pADC_09_d = NULL;
    m_pTDC_09_d = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_09_d", m_pADC_09_d));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_09_d", m_pTDC_09_d));
   // chan_10
    m_pADC_10_d = NULL;
    m_pTDC_10_d = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_10_d", m_pADC_10_d));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_10_d", m_pTDC_10_d));
   // chan_11
    m_pADC_11_d = NULL;
    m_pTDC_11_d = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_11_d", m_pADC_11_d));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_11_d", m_pTDC_11_d));
   // chan_12
    m_pADC_12_d = NULL;
    m_pTDC_12_d = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_12_d", m_pADC_12_d));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_12_d", m_pTDC_12_d));
   // chan_13
    m_pADC_13_d = NULL;
    m_pTDC_13_d = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_13_d", m_pADC_13_d));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_13_d", m_pTDC_13_d));
   // chan_14
    m_pADC_14_d = NULL;
    m_pTDC_14_d = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_14_d", m_pADC_14_d));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_14_d", m_pTDC_14_d));
   // chan_15
    m_pADC_15_d = NULL;
    m_pTDC_15_d = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_15_d", m_pADC_15_d));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_15_d", m_pTDC_15_d));
   
    //-----------------------------------------------------
    m_dumpEvent = false;
    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, DQMXmlHelper::readParameterValue(xmlHandle,
													     "DumpEvent", m_dumpEvent));

    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode Testbeam::initModule()
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- init()" );

    // print directory structure of monitor element storage in console
    DQMModuleApi::cd(this);
    DQMModuleApi::ls(this, true);

    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode Testbeam::endModule()
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- end()" );
    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode Testbeam::processEvent(DQMEvent *pEvent)
  {

    int CycleNrIndex = 0;
    int BxIDIndex = 1;
    int EvtNrIndex = 2;
    int ChipIDIndex = 3;
    int NChannelsIndex = 4;
    int TDCFirstChannelIndex = 5;
    int ADCFirstChannelIndex = TDCFirstChannelIndex+36;

    std::vector<int> asic_default = {237,241,245,121,117,249,233,225,217,213,205,221,201,209,229};

    int asic_a[15];
    int asic_b[15];
    int asic_c[15];
    int asic_d[15];

    for(int i=0; i<15; i++) {
      asic_a[i]=asic_default[i] + (m_asicNr_a-1);
      asic_b[i]=asic_default[i] + (m_asicNr_b-1);
      asic_c[i]=asic_default[i] + (m_asicNr_c-1);
      asic_d[i]=asic_default[i] + (m_asicNr_d-1);
    }

    EVENT::LCEvent *pLCEvent = pEvent->getEvent<EVENT::LCEvent>();

    if(!pLCEvent)
      return STATUS_CODE_FAILURE;

    if(m_dumpEvent)
      UTIL::LCTOOLS::dumpEvent(pLCEvent);


    const std::vector<std::string> *pCollectionNames = pLCEvent->getCollectionNames();

    for(std::vector<std::string>::const_iterator colIter = pCollectionNames->begin();
	colIter != pCollectionNames->end() ; ++colIter)
      {

	const std::string &collectionName(*colIter);

	EVENT::LCCollection *pLCCollection = pLCEvent->getCollection(collectionName);


	if(collectionName=="EUDAQDataScCAL")
	  {

	    if(pLCCollection->getTypeName() == EVENT::LCIO::LCGENERICOBJECT)
	      {

		const int nElements = pLCCollection->getNumberOfElements();
		for(int e=0 ; e<nElements ; e++)
		  {
		    const EVENT::LCGenericObject *const pAHCALRaw = 
		      dynamic_cast<const EVENT::LCGenericObject *const>(pLCCollection->getElementAt(e));

		    if(NULL == pAHCALRaw)
		      continue;

		    const int nChannels = pAHCALRaw->getIntVal(NChannelsIndex);
		    if(nChannels!= 36) {
		      LOG4CXX_INFO( dqmMainLogger , "Wrong number of channels ("<<nChannels<<"), skip event" ); 
		      continue;
		    }

		    for(int f=0 ; f<nChannels ; f++)		// This loop iterates over the channels in each readout cycle
		      {

			// Vectors for storing our TDC and ADC by channel

			int tdcRAW;
			int adcRAW;
			int tdc;
			int adc;
			int hitbit_tdc;
			int gainbit_tdc;
			int hitbit_adc;
			int gainbit_adc;

			tdcRAW = pAHCALRaw->getIntVal(TDCFirstChannelIndex+f);
			adcRAW = pAHCALRaw->getIntVal(ADCFirstChannelIndex+f);

			tdc = tdcRAW%4096;
			adc = adcRAW%4096;

			hitbit_adc = (adcRAW & 0x1000)?1:0;
			gainbit_adc = (adcRAW & 0x2000)?1:0;

			hitbit_tdc = (tdcRAW & 0x1000)?1:0;
			gainbit_tdc = (tdcRAW & 0x2000)?1:0;


			if( hitbit_adc!=1 || hitbit_adc != hitbit_tdc || pAHCALRaw->getIntVal(EvtNrIndex) == 0) continue;


			// -------------------------------------------------------------------
			// channel_a
                        if(f == m_ChannelNr_a ) {

			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_a[0] )  {
			    m_pADC_01_a->get<TH1I>()->Fill(adc);
			    m_pTDC_01_a->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_a[1] )  {
			    m_pADC_02_a->get<TH1I>()->Fill(adc);
			    m_pTDC_02_a->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_a[2] )  {
			    m_pADC_03_a->get<TH1I>()->Fill(adc);
			    m_pTDC_03_a->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_a[3] )  {
			    m_pADC_04_a->get<TH1I>()->Fill(adc);
			    m_pTDC_04_a->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_a[4] )  {
			    m_pADC_05_a->get<TH1I>()->Fill(adc);
			    m_pTDC_05_a->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_a[5] )  {
			    m_pADC_06_a->get<TH1I>()->Fill(adc);
			    m_pTDC_06_a->get<TH1I>()->Fill(tdc);
			}

			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_a[6] )  {
			    m_pADC_07_a->get<TH1I>()->Fill(adc);
			    m_pTDC_07_a->get<TH1I>()->Fill(tdc);
			}

			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_a[7] )  {
			    m_pADC_08_a->get<TH1I>()->Fill(adc);
			    m_pTDC_08_a->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_a[8] )  {
			    m_pADC_09_a->get<TH1I>()->Fill(adc);
			    m_pTDC_09_a->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_a[9] )  {
			    m_pADC_10_a->get<TH1I>()->Fill(adc);
			    m_pTDC_10_a->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_a[10] )  {
			    m_pADC_11_a->get<TH1I>()->Fill(adc);
			    m_pTDC_11_a->get<TH1I>()->Fill(tdc);
			}

			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_a[11] )  {
			    m_pADC_12_a->get<TH1I>()->Fill(adc);
			    m_pTDC_12_a->get<TH1I>()->Fill(tdc);
			}
 			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_a[12] )  {
			    m_pADC_13_a->get<TH1I>()->Fill(adc);
			    m_pTDC_13_a->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_a[13] )  {
			    m_pADC_14_a->get<TH1I>()->Fill(adc);
			    m_pTDC_14_a->get<TH1I>()->Fill(tdc);
			}

			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_a[14] )  {
			    m_pADC_15_a->get<TH1I>()->Fill(adc);
			    m_pTDC_15_a->get<TH1I>()->Fill(tdc);
			}
			}
			// -------------------------------------------------------------------
			// channel_b
                        if(f == m_ChannelNr_b ) {

			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_b[0] )  {
			    m_pADC_01_b->get<TH1I>()->Fill(adc);
			    m_pTDC_01_b->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_b[1] )  {
			    m_pADC_02_b->get<TH1I>()->Fill(adc);
			    m_pTDC_02_b->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_b[2] )  {
			    m_pADC_03_b->get<TH1I>()->Fill(adc);
			    m_pTDC_03_b->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_b[3] )  {
			    m_pADC_04_b->get<TH1I>()->Fill(adc);
			    m_pTDC_04_b->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_b[4] )  {
			    m_pADC_05_b->get<TH1I>()->Fill(adc);
			    m_pTDC_05_b->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_b[5] )  {
			    m_pADC_06_b->get<TH1I>()->Fill(adc);
			    m_pTDC_06_b->get<TH1I>()->Fill(tdc);
			}

			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_b[6] )  {
			    m_pADC_07_b->get<TH1I>()->Fill(adc);
			    m_pTDC_07_b->get<TH1I>()->Fill(tdc);
			}

			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_b[7] )  {
			    m_pADC_08_b->get<TH1I>()->Fill(adc);
			    m_pTDC_08_b->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_b[8] )  {
			    m_pADC_09_b->get<TH1I>()->Fill(adc);
			    m_pTDC_09_b->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_b[9] )  {
			    m_pADC_10_b->get<TH1I>()->Fill(adc);
			    m_pTDC_10_b->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_b[10] )  {
			    m_pADC_11_b->get<TH1I>()->Fill(adc);
			    m_pTDC_11_b->get<TH1I>()->Fill(tdc);
			}

			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_b[11] )  {
			    m_pADC_12_b->get<TH1I>()->Fill(adc);
			    m_pTDC_12_b->get<TH1I>()->Fill(tdc);
			}
 			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_b[12] )  {
			    m_pADC_13_b->get<TH1I>()->Fill(adc);
			    m_pTDC_13_b->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_b[13] )  {
			    m_pADC_14_b->get<TH1I>()->Fill(adc);
			    m_pTDC_14_b->get<TH1I>()->Fill(tdc);
			}

			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_b[14] )  {
			    m_pADC_15_b->get<TH1I>()->Fill(adc);
			    m_pTDC_15_b->get<TH1I>()->Fill(tdc);
			}
			}
			// -------------------------------------------------------------------
			// channel_c
                        if(f == m_ChannelNr_c ) {

			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_c[0] )  {
			    m_pADC_01_c->get<TH1I>()->Fill(adc);
			    m_pTDC_01_c->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_c[1] )  {
			    m_pADC_02_c->get<TH1I>()->Fill(adc);
			    m_pTDC_02_c->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_c[2] )  {
			    m_pADC_03_c->get<TH1I>()->Fill(adc);
			    m_pTDC_03_c->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_c[3] )  {
			    m_pADC_04_c->get<TH1I>()->Fill(adc);
			    m_pTDC_04_c->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_c[4] )  {
			    m_pADC_05_c->get<TH1I>()->Fill(adc);
			    m_pTDC_05_c->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_c[5] )  {
			    m_pADC_06_c->get<TH1I>()->Fill(adc);
			    m_pTDC_06_c->get<TH1I>()->Fill(tdc);
			}

			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_c[6] )  {
			    m_pADC_07_c->get<TH1I>()->Fill(adc);
			    m_pTDC_07_c->get<TH1I>()->Fill(tdc);
			}

			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_c[7] )  {
			    m_pADC_08_c->get<TH1I>()->Fill(adc);
			    m_pTDC_08_c->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_c[8] )  {
			    m_pADC_09_c->get<TH1I>()->Fill(adc);
			    m_pTDC_09_c->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_c[9] )  {
			    m_pADC_10_c->get<TH1I>()->Fill(adc);
			    m_pTDC_10_c->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_c[10] )  {
			    m_pADC_11_c->get<TH1I>()->Fill(adc);
			    m_pTDC_11_c->get<TH1I>()->Fill(tdc);
			}

			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_c[11] )  {
			    m_pADC_12_c->get<TH1I>()->Fill(adc);
			    m_pTDC_12_c->get<TH1I>()->Fill(tdc);
			}
 			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_c[12] )  {
			    m_pADC_13_c->get<TH1I>()->Fill(adc);
			    m_pTDC_13_c->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_c[13] )  {
			    m_pADC_14_c->get<TH1I>()->Fill(adc);
			    m_pTDC_14_c->get<TH1I>()->Fill(tdc);
			}

			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_c[14] )  {
			    m_pADC_15_c->get<TH1I>()->Fill(adc);
			    m_pTDC_15_c->get<TH1I>()->Fill(tdc);
			}
			}
			// -------------------------------------------------------------------
			// channel_d
                        if(f == m_ChannelNr_d ) {

			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_d[0] )  {
			    m_pADC_01_d->get<TH1I>()->Fill(adc);
			    m_pTDC_01_d->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_d[1] )  {
			    m_pADC_02_d->get<TH1I>()->Fill(adc);
			    m_pTDC_02_d->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_d[2] )  {
			    m_pADC_03_d->get<TH1I>()->Fill(adc);
			    m_pTDC_03_d->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_d[3] )  {
			    m_pADC_04_d->get<TH1I>()->Fill(adc);
			    m_pTDC_04_d->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_d[4] )  {
			    m_pADC_05_d->get<TH1I>()->Fill(adc);
			    m_pTDC_05_d->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_d[5] )  {
			    m_pADC_06_d->get<TH1I>()->Fill(adc);
			    m_pTDC_06_d->get<TH1I>()->Fill(tdc);
			}

			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_d[6] )  {
			    m_pADC_07_d->get<TH1I>()->Fill(adc);
			    m_pTDC_07_d->get<TH1I>()->Fill(tdc);
			}

			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_d[7] )  {
			    m_pADC_08_d->get<TH1I>()->Fill(adc);
			    m_pTDC_08_d->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_d[8] )  {
			    m_pADC_09_d->get<TH1I>()->Fill(adc);
			    m_pTDC_09_d->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_d[9] )  {
			    m_pADC_10_d->get<TH1I>()->Fill(adc);
			    m_pTDC_10_d->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_d[10] )  {
			    m_pADC_11_d->get<TH1I>()->Fill(adc);
			    m_pTDC_11_d->get<TH1I>()->Fill(tdc);
			}

			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_d[11] )  {
			    m_pADC_12_d->get<TH1I>()->Fill(adc);
			    m_pTDC_12_d->get<TH1I>()->Fill(tdc);
			}
 			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_d[12] )  {
			    m_pADC_13_d->get<TH1I>()->Fill(adc);
			    m_pTDC_13_d->get<TH1I>()->Fill(tdc);
			}
			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_d[13] )  {
			    m_pADC_14_d->get<TH1I>()->Fill(adc);
			    m_pTDC_14_d->get<TH1I>()->Fill(tdc);
			}

			if(pAHCALRaw->getIntVal(ChipIDIndex) == asic_d[14] )  {
			    m_pADC_15_d->get<TH1I>()->Fill(adc);
			    m_pTDC_15_d->get<TH1I>()->Fill(tdc);
			}
			}

		
		      }//for f

		  }//for elements

	      }// if LCGENERICOBJECT

	  }//if collectionName == EUDAQDataScCAL
      }// iterator


    return STATUS_CODE_SUCCESS;

  }

  //-------------------------------------------------------------------------------------------------

  StatusCode Testbeam::startOfCycle()
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- startOfCycle()" );
    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode Testbeam::endOfCycle()
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- endOfCycle()" );


    // run all quality tests on all monitor elements
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMModuleApi::runQualityTests(this));

    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode Testbeam::startOfRun(DQMRun *pRun)
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- startOfRun()" );
    LOG4CXX_INFO( dqmMainLogger , "Run no " << pRun->getRunNumber() );
    //	time_t startTime = pRun->getStartTime();
    time_t startTime = std::chrono::system_clock::to_time_t(pRun->getStartTime());

    std::string timeStr;
    DQMCoreTool::timeToHMS(startTime, timeStr);

    LOG4CXX_INFO( dqmMainLogger , "Start time " << timeStr );
    LOG4CXX_INFO( dqmMainLogger , "Detector is " << pRun->getDetectorName() );
    LOG4CXX_INFO( dqmMainLogger , "Description " << pRun->getDescription() );

    m_ChannelNr_a=0;
    m_ChannelNr_b=0;
    m_ChannelNr_c=0;
    m_ChannelNr_d=0;

    m_asicNr_a=0;
    m_asicNr_b=0;
    m_asicNr_c=0;
    m_asicNr_d=0;

    pRun->getParameter("ChannelNr_a",m_ChannelNr_a) ;
    pRun->getParameter("ChannelNr_b",m_ChannelNr_b) ;
    pRun->getParameter("ChannelNr_c",m_ChannelNr_c) ;
    pRun->getParameter("ChannelNr_d",m_ChannelNr_d) ;

    pRun->getParameter("asicNr_a",m_asicNr_a) ;
    pRun->getParameter("asicNr_b",m_asicNr_b) ;
    pRun->getParameter("asicNr_c",m_asicNr_c) ;
    pRun->getParameter("asicNr_d",m_asicNr_d) ;

    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode Testbeam::endOfRun(DQMRun *pRun)
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- endOfRun()" );
    LOG4CXX_INFO( dqmMainLogger , "Run no " << pRun->getRunNumber() );
   
    std::cout<< " Summary, end of run " <<std::endl;
    std::cout<< " ##################################################################### " <<std::endl;
    std::cout<< "  " <<std::endl;
    std::cout<< " channel a (ch="<<m_ChannelNr_a<<", asic="<<m_asicNr_a<<"), layers from 1-15" <<std::endl;
    std::cout<< "Nentries     Mean(histo) "<<std::endl;
    std::cout <<m_pADC_01_a->get<TH1I>()->GetEntries()<<" "<< m_pADC_01_a->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_02_a->get<TH1I>()->GetEntries()<<" "<< m_pADC_02_a->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_03_a->get<TH1I>()->GetEntries()<<" "<< m_pADC_03_a->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_04_a->get<TH1I>()->GetEntries()<<" "<< m_pADC_04_a->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_05_a->get<TH1I>()->GetEntries()<<" "<< m_pADC_05_a->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_06_a->get<TH1I>()->GetEntries()<<" "<< m_pADC_06_a->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_07_a->get<TH1I>()->GetEntries()<<" "<< m_pADC_07_a->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_08_a->get<TH1I>()->GetEntries()<<" "<< m_pADC_08_a->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_09_a->get<TH1I>()->GetEntries()<<" "<< m_pADC_09_a->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_10_a->get<TH1I>()->GetEntries()<<" "<< m_pADC_10_a->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_11_a->get<TH1I>()->GetEntries()<<" "<< m_pADC_11_a->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_12_a->get<TH1I>()->GetEntries()<<" "<< m_pADC_12_a->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_13_a->get<TH1I>()->GetEntries()<<" "<< m_pADC_13_a->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_14_a->get<TH1I>()->GetEntries()<<" "<< m_pADC_14_a->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_15_a->get<TH1I>()->GetEntries()<<" "<< m_pADC_15_a->get<TH1I>()->GetMean()<< std::endl;
    std::cout<< "  " <<std::endl;
    std::cout<< " channel b (ch="<<m_ChannelNr_b<<", asic="<<m_asicNr_b<<"), layers from 1-15" <<std::endl;
    std::cout<< "Nentries     Mean(histo) "<<std::endl;
    std::cout <<m_pADC_01_b->get<TH1I>()->GetEntries()<<" "<< m_pADC_01_b->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_02_b->get<TH1I>()->GetEntries()<<" "<< m_pADC_02_b->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_03_b->get<TH1I>()->GetEntries()<<" "<< m_pADC_03_b->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_04_b->get<TH1I>()->GetEntries()<<" "<< m_pADC_04_b->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_05_b->get<TH1I>()->GetEntries()<<" "<< m_pADC_05_b->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_06_b->get<TH1I>()->GetEntries()<<" "<< m_pADC_06_b->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_07_b->get<TH1I>()->GetEntries()<<" "<< m_pADC_07_b->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_08_b->get<TH1I>()->GetEntries()<<" "<< m_pADC_08_b->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_09_b->get<TH1I>()->GetEntries()<<" "<< m_pADC_09_b->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_10_b->get<TH1I>()->GetEntries()<<" "<< m_pADC_10_b->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_11_b->get<TH1I>()->GetEntries()<<" "<< m_pADC_11_b->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_12_b->get<TH1I>()->GetEntries()<<" "<< m_pADC_12_b->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_13_b->get<TH1I>()->GetEntries()<<" "<< m_pADC_13_b->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_14_b->get<TH1I>()->GetEntries()<<" "<< m_pADC_14_b->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_15_b->get<TH1I>()->GetEntries()<<" "<< m_pADC_15_b->get<TH1I>()->GetMean()<< std::endl;
    std::cout<< "  " <<std::endl;
    std::cout<< " channel c (ch="<<m_ChannelNr_c<<", asic="<<m_asicNr_c<<"), layers from 1-15" <<std::endl;
    std::cout<< "Nentries     Mean(histo) "<<std::endl;
    std::cout <<m_pADC_01_c->get<TH1I>()->GetEntries()<<" "<< m_pADC_01_c->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_02_c->get<TH1I>()->GetEntries()<<" "<< m_pADC_02_c->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_03_c->get<TH1I>()->GetEntries()<<" "<< m_pADC_03_c->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_04_c->get<TH1I>()->GetEntries()<<" "<< m_pADC_04_c->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_05_c->get<TH1I>()->GetEntries()<<" "<< m_pADC_05_c->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_06_c->get<TH1I>()->GetEntries()<<" "<< m_pADC_06_c->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_07_c->get<TH1I>()->GetEntries()<<" "<< m_pADC_07_c->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_08_c->get<TH1I>()->GetEntries()<<" "<< m_pADC_08_c->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_09_c->get<TH1I>()->GetEntries()<<" "<< m_pADC_09_c->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_10_c->get<TH1I>()->GetEntries()<<" "<< m_pADC_10_c->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_11_c->get<TH1I>()->GetEntries()<<" "<< m_pADC_11_c->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_12_c->get<TH1I>()->GetEntries()<<" "<< m_pADC_12_c->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_13_c->get<TH1I>()->GetEntries()<<" "<< m_pADC_13_c->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_14_c->get<TH1I>()->GetEntries()<<" "<< m_pADC_14_c->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_15_c->get<TH1I>()->GetEntries()<<" "<< m_pADC_15_c->get<TH1I>()->GetMean()<< std::endl;
    std::cout<< "  " <<std::endl;
    std::cout<< " channel d (ch="<<m_ChannelNr_d<<", asic="<<m_asicNr_d<<"), layers from 1-15" <<std::endl;
    std::cout<< "Nentries     Mean(histo) "<<std::endl;
    std::cout <<m_pADC_01_d->get<TH1I>()->GetEntries()<<" "<< m_pADC_01_d->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_02_d->get<TH1I>()->GetEntries()<<" "<< m_pADC_02_d->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_03_d->get<TH1I>()->GetEntries()<<" "<< m_pADC_03_d->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_04_d->get<TH1I>()->GetEntries()<<" "<< m_pADC_04_d->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_05_d->get<TH1I>()->GetEntries()<<" "<< m_pADC_05_d->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_06_d->get<TH1I>()->GetEntries()<<" "<< m_pADC_06_d->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_07_d->get<TH1I>()->GetEntries()<<" "<< m_pADC_07_d->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_08_d->get<TH1I>()->GetEntries()<<" "<< m_pADC_08_d->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_09_d->get<TH1I>()->GetEntries()<<" "<< m_pADC_09_d->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_10_d->get<TH1I>()->GetEntries()<<" "<< m_pADC_10_d->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_11_d->get<TH1I>()->GetEntries()<<" "<< m_pADC_11_d->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_12_d->get<TH1I>()->GetEntries()<<" "<< m_pADC_12_d->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_13_d->get<TH1I>()->GetEntries()<<" "<< m_pADC_13_d->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_14_d->get<TH1I>()->GetEntries()<<" "<< m_pADC_14_d->get<TH1I>()->GetMean()<< std::endl;
    std::cout <<m_pADC_15_d->get<TH1I>()->GetEntries()<<" "<< m_pADC_15_d->get<TH1I>()->GetMean()<< std::endl;


    //	time_t endTime = pRun->getEndTime();
    time_t endTime = std::chrono::system_clock::to_time_t(pRun->getEndTime());
    std::string timeStr;
    DQMCoreTool::timeToHMS(endTime, timeStr);

    LOG4CXX_INFO( dqmMainLogger , "End time " << timeStr );

    return STATUS_CODE_SUCCESS;
  }

};

