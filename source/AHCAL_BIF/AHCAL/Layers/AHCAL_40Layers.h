 /// \file AHCALRawModuleGlobal.h
/*
 *
 *-------------------------------------------------------------
 * AHCALRawModuleChannel.cc source template automatically modified from 
 * CaloHitModule  generated by a class generator
 * by A. Irles, DESY, 23 March 2016
 *--------------------------------------------------------------
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

#ifndef AHCAL_40Layers_H
#define AHCAL_40Layers_H

#define C_MAX_LAYERS 40

#include "dqm4hep/DQMAnalysisModule.h"

namespace dqm4hep {

  class DQMMonitorElement;

  /** AHCAL_40Layers class
   */ 
  class AHCAL_40Layers : public DQMAnalysisModule {
  public:
    AHCAL_40Layers();
    ~AHCAL_40Layers();

    StatusCode initModule();
    StatusCode readSettings(const TiXmlHandle xmlHandle);
    StatusCode processEvent(DQMEvent *pEvent);
    StatusCode startOfCycle();
    StatusCode endOfCycle();
    StatusCode startOfRun(DQMRun *pRun);
    StatusCode endOfRun(DQMRun *pRun);
    StatusCode endModule();

    StatusCode buildGeometryMap(const TiXmlHandle xmlHandle);
    int electronicsToIJK(int Chip, int Channel);
    int IJKToElectronics(int I, int J, int K);


  protected:

    //################################################################
    // temperature 
    DQMMonitorElementPtr                        m_DAQerrors;

    //################################################################
    // temperature 
    DQMMonitorElementPtr m_pTempAverage[C_MAX_LAYERS];
    DQMMonitorElementPtr m_pTempDIF[C_MAX_LAYERS];
    DQMMonitorElementPtr m_pTempPWR[C_MAX_LAYERS];

    // ###########################################################################3
    // AHCAL maps
    //3D
    DQMMonitorElementPtr m_pMIP_600;
    DQMMonitorElementPtr m_pPed_600;
    // 2D- MIP hitmaps
    DQMMonitorElementPtr m_pMIP_600[C_MAX_LAYERS];
    // 2D- Ped hitmaps
    DQMMonitorElementPtr m_pPed_600[C_MAX_LAYERS];
    
    std::string                                 m_geometryFile;
    std::map<int, int>                          ijkmap;
    std::map<int, int>                          chpchnmap;

    //##########################################################################
    bool                                        m_dumpEvent;

    int goodDAQ;
    int badDAQ;

    int m_minimumBxid;
    int m_minimumMemcell;
  }; 
} 

#endif  //  AHCAL_40Layers_H
