/// \file AHCAL_15Layers.cc
/*
 *-------------------------------------------------------------
 * AHCALRawModule.cc source template automatically modified from 
 * CaloHitModule  generated by a class generator
 * by A. Irles, DESY, 23 March 2016
 *--------------------------------------------------------------
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "AHCAL_15Layers.h"
// to handle and acces to the elements in the LCIO generic Object

// -- std headers
#include <ctime>
#include <cstdlib>
#include <limits>
#include <map>
#include <vector>

//#ifndef USELCIO
//#define USELCIO
#include "EVENT/LCGenericObject.h"
#include "EVENT/LCCollection.h"
#include "EVENT/LCEvent.h"
#include "EVENT/LCIO.h"
#include "UTIL/CellIDDecoder.h"
#include "UTIL/LCTOOLS.h"
//#endif

// -- dqm4hep headers
#include "dqm4hep/DQMMonitorElement.h"
#include "dqm4hep/DQMCoreTool.h"
#include "dqm4hep/DQMRun.h"
#include "dqm4hep/DQMXmlHelper.h"
#include "dqm4hep/DQMEvent.h"
#include "dqm4hep/DQMQualityTest.h"
#include "dqm4hep/DQMModuleApi.h"
#include "dqm4hep/DQMPlugin.h"

// -- root headers
#include "TRandom.h"
#include "TString.h" // Added by Tom for TString handling

//using namespace lcio;

namespace dqm4hep
{
  // module plugin declaration
  DQM_PLUGIN_DECL( AHCAL_15Layers , "AHCAL_15Layers" )

  //-------------------------------------------------------------------------------------------------

  AHCAL_15Layers::AHCAL_15Layers() :
  DQMAnalysisModule()
  {
    setDetectorName("NO DETECTOR");
    setVersion(1, 0, 0);
  }

  //-------------------------------------------------------------------------------------------------

  AHCAL_15Layers::~AHCAL_15Layers()
  {
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode AHCAL_15Layers::readSettings(const TiXmlHandle xmlHandle)
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- readSettings()" );


   // ########################################################################################################################################
    // Monitorize the DAQ errors
    m_DAQerrors= NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "DAQerrors", m_DAQerrors));

    // ########################################################################################################################################
    // TEMPERATURE
    m_pTempAverage_1 = NULL;
    m_pTempAverage_2 = NULL;
    m_pTempAverage_3 = NULL;
    m_pTempAverage_4 = NULL;
    m_pTempAverage_5 = NULL;
    m_pTempAverage_6 = NULL;
    m_pTempAverage_7 = NULL;
    m_pTempAverage_8 = NULL;
    m_pTempAverage_9 = NULL;
    m_pTempAverage_10 = NULL;
    m_pTempAverage_11 = NULL;
    m_pTempAverage_12 = NULL;
    m_pTempAverage_13 = NULL;
    m_pTempAverage_14 = NULL;
    m_pTempAverage_15 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempAverage_01", m_pTempAverage_1));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempAverage_02", m_pTempAverage_2));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempAverage_03", m_pTempAverage_3));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempAverage_04", m_pTempAverage_4));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempAverage_05", m_pTempAverage_5));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempAverage_06", m_pTempAverage_6));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempAverage_07", m_pTempAverage_7));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempAverage_08", m_pTempAverage_8));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempAverage_09", m_pTempAverage_9));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempAverage_10", m_pTempAverage_10));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempAverage_11", m_pTempAverage_11));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempAverage_12", m_pTempAverage_12));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempAverage_13", m_pTempAverage_13));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempAverage_14", m_pTempAverage_14));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempAverage_15", m_pTempAverage_15));

    // DIF
    m_pTempDIF_1 = NULL;
    m_pTempDIF_2 = NULL;
    m_pTempDIF_3 = NULL;
    m_pTempDIF_4 = NULL;
    m_pTempDIF_5 = NULL;
    m_pTempDIF_6 = NULL;
    m_pTempDIF_7 = NULL;
    m_pTempDIF_8 = NULL;
    m_pTempDIF_9 = NULL;
    m_pTempDIF_10 = NULL;
    m_pTempDIF_11 = NULL;
    m_pTempDIF_12 = NULL;
    m_pTempDIF_13 = NULL;
    m_pTempDIF_14 = NULL;
    m_pTempDIF_15 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempDIF_01", m_pTempDIF_1));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempDIF_02", m_pTempDIF_2));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempDIF_03", m_pTempDIF_3));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempDIF_04", m_pTempDIF_4));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempDIF_05", m_pTempDIF_5));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempDIF_06", m_pTempDIF_6));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempDIF_07", m_pTempDIF_7));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempDIF_08", m_pTempDIF_8));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempDIF_09", m_pTempDIF_9));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempDIF_10", m_pTempDIF_10));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempDIF_11", m_pTempDIF_11));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempDIF_12", m_pTempDIF_12));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempDIF_13", m_pTempDIF_13));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempDIF_14", m_pTempDIF_14));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempDIF_15", m_pTempDIF_15));

    // PWR
    m_pTempPWR_1 = NULL;
    m_pTempPWR_2 = NULL;
    m_pTempPWR_3 = NULL;
    m_pTempPWR_4 = NULL;
    m_pTempPWR_5 = NULL;
    m_pTempPWR_6 = NULL;
    m_pTempPWR_7 = NULL;
    m_pTempPWR_8 = NULL;
    m_pTempPWR_9 = NULL;
    m_pTempPWR_10 = NULL;
    m_pTempPWR_11 = NULL;
    m_pTempPWR_12 = NULL;
    m_pTempPWR_13 = NULL;
    m_pTempPWR_14 = NULL;
    m_pTempPWR_15 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempPWR_01", m_pTempPWR_1));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempPWR_02", m_pTempPWR_2));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempPWR_03", m_pTempPWR_3));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempPWR_04", m_pTempPWR_4));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempPWR_05", m_pTempPWR_5));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempPWR_06", m_pTempPWR_6));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempPWR_07", m_pTempPWR_7));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempPWR_08", m_pTempPWR_8));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempPWR_09", m_pTempPWR_9));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempPWR_10", m_pTempPWR_10));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempPWR_11", m_pTempPWR_11));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempPWR_12", m_pTempPWR_12));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempPWR_13", m_pTempPWR_13));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempPWR_14", m_pTempPWR_14));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TempPWR_15", m_pTempPWR_15));

    // ####################################################################################################################################
    // AHCAL section

    std::string m_geometryFilename = "";

    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, DQMXmlHelper::readParameterValue(xmlHandle,
                                                                                                             "GeometryFilename", m_geometryFilename));

    dqm4hep::TiXmlDocument m_geometryFile(m_geometryFilename);
    
    if( ! m_geometryFile.LoadFile() )
      return dqm4hep::STATUS_CODE_FAILURE;

    const dqm4hep::TiXmlHandle xmlGeometryFileHandle(&m_geometryFile);

    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, AHCAL_15Layers::buildGeometryMap(xmlGeometryFileHandle));

    
    //---------------------------------------------------------------------
    //3-D hitmaps
    m_pMIP_300 = NULL;
    m_pPed_300 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "MIP_300", m_pMIP_300));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "Ped_300", m_pPed_300));

    //---------------------------------------------------------------------
    //MIP hitmaps
    m_pMIP_300_l01 = NULL;
    m_pMIP_300_l02 = NULL;
    m_pMIP_300_l03 = NULL;
    m_pMIP_300_l04 = NULL;
    m_pMIP_300_l05 = NULL;
    m_pMIP_300_l06 = NULL;
    m_pMIP_300_l07 = NULL;
    m_pMIP_300_l08 = NULL;
    m_pMIP_300_l09 = NULL;
    m_pMIP_300_l10 = NULL;
    m_pMIP_300_l11 = NULL;
    m_pMIP_300_l12 = NULL;
    m_pMIP_300_l13 = NULL;
    m_pMIP_300_l14 = NULL;
    m_pMIP_300_l15 = NULL;

    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "MIP_300_l01", m_pMIP_300_l01));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "MIP_300_l02", m_pMIP_300_l02));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "MIP_300_l03", m_pMIP_300_l03));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "MIP_300_l04", m_pMIP_300_l04));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "MIP_300_l05", m_pMIP_300_l05));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "MIP_300_l06", m_pMIP_300_l06));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "MIP_300_l07", m_pMIP_300_l07));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "MIP_300_l08", m_pMIP_300_l08));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "MIP_300_l09", m_pMIP_300_l09));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "MIP_300_l10", m_pMIP_300_l10));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "MIP_300_l11", m_pMIP_300_l11));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "MIP_300_l12", m_pMIP_300_l12));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "MIP_300_l13", m_pMIP_300_l13));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "MIP_300_l14", m_pMIP_300_l14));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "MIP_300_l15", m_pMIP_300_l15));


    //---------------------------------------------------------------------
    //Ped hitmaps
    m_pPed_300_l01 = NULL;
    m_pPed_300_l02 = NULL;
    m_pPed_300_l03 = NULL;
    m_pPed_300_l04 = NULL;
    m_pPed_300_l05 = NULL;
    m_pPed_300_l06 = NULL;
    m_pPed_300_l07 = NULL;
    m_pPed_300_l08 = NULL;
    m_pPed_300_l09 = NULL;
    m_pPed_300_l10 = NULL;
    m_pPed_300_l11 = NULL;
    m_pPed_300_l12 = NULL;
    m_pPed_300_l13 = NULL;
    m_pPed_300_l14 = NULL;
    m_pPed_300_l15 = NULL;

    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "Ped_300_l01", m_pPed_300_l01));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "Ped_300_l02", m_pPed_300_l02));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "Ped_300_l03", m_pPed_300_l03));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "Ped_300_l04", m_pPed_300_l04));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "Ped_300_l05", m_pPed_300_l05));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "Ped_300_l06", m_pPed_300_l06));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "Ped_300_l07", m_pPed_300_l07));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "Ped_300_l08", m_pPed_300_l08));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "Ped_300_l09", m_pPed_300_l09));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "Ped_300_l10", m_pPed_300_l10));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "Ped_300_l11", m_pPed_300_l11));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "Ped_300_l12", m_pPed_300_l12));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "Ped_300_l13", m_pPed_300_l13));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "Ped_300_l14", m_pPed_300_l14));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "Ped_300_l15", m_pPed_300_l15));
  

    // ####################################################################################################################################
    //-----------------------------------------------------
    m_dumpEvent = false;
    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, DQMXmlHelper::readParameterValue(xmlHandle,
													     "DumpEvent", m_dumpEvent));

    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode AHCAL_15Layers::initModule()
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- init()" );

    // print directory structure of monitor element storage in console
    DQMModuleApi::cd(this);
    DQMModuleApi::ls(this, true);

    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode AHCAL_15Layers::endModule()
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- end()" );
    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode AHCAL_15Layers::processEvent(DQMEvent *pEvent)
  {

    int EventCntIndex = 1;
    int BxIDIndex = 1;
    int EvtNrIndex = 2;
    int ChipIDIndex = 3;
    int NChannelsIndex = 4;
    int TDCFirstChannelIndex = 5;
    int ADCFirstChannelIndex = TDCFirstChannelIndex+36;

    EVENT::LCEvent *pLCEvent = pEvent->getEvent<EVENT::LCEvent>();

    if(!pLCEvent)
      return STATUS_CODE_FAILURE;

    if(m_dumpEvent)
      UTIL::LCTOOLS::dumpEvent(pLCEvent);


    const std::vector<std::string> *pCollectionNames = pLCEvent->getCollectionNames();

    //temperature variables
    float tdif_1, tdif_2, tdif_3, tdif_4, tdif_5, tdif_6, tdif_7, tdif_8, tdif_9, tdif_10, tdif_11, tdif_12, tdif_13, tdif_14, tdif_15;
    float tpwr_1, tpwr_2, tpwr_3, tpwr_4, tpwr_5, tpwr_6, tpwr_7, tpwr_8, tpwr_9, tpwr_10, tpwr_11, tpwr_12, tpwr_13, tpwr_14, tpwr_15;
    float tav_1, tav_2, tav_3, tav_4, tav_5, tav_6, tav_7, tav_8, tav_9, tav_10, tav_11, tav_12, tav_13, tav_14, tav_15;

    for(std::vector<std::string>::const_iterator colIter = pCollectionNames->begin();
	colIter != pCollectionNames->end() ; ++colIter)
      {

	const std::string &collectionName(*colIter);

	EVENT::LCCollection *pLCCollection = pLCEvent->getCollection(collectionName);


	// #####################################################################################################################
	// temperature section
	if(collectionName=="TempSensor")
	  {

	    const int nElements = pLCCollection->getNumberOfElements();
	    long64 epoch = pLCEvent->getTimeStamp();
	    
	    for(int e=0 ; e<nElements ; e++)
	      {
		const EVENT::LCGenericObject *const pTempRaw = 
		  dynamic_cast<const EVENT::LCGenericObject *const>(pLCCollection->getElementAt(e));
		
		if(NULL == pTempRaw)
		  continue;
		
		if(e==0) {tdif_1 = pTempRaw->getIntVal(8); tpwr_1 = pTempRaw->getIntVal(9);}
		if(e==1) {tdif_2 = pTempRaw->getIntVal(8); tpwr_2 = pTempRaw->getIntVal(9);}
		if(e==2) {tdif_3 = pTempRaw->getIntVal(8); tpwr_3 = pTempRaw->getIntVal(9);}
		if(e==3) {tdif_4 = pTempRaw->getIntVal(8); tpwr_4 = pTempRaw->getIntVal(9);}
		if(e==4) {tdif_5 = pTempRaw->getIntVal(8); tpwr_5 = pTempRaw->getIntVal(9);}
		if(e==5) {tdif_6 = pTempRaw->getIntVal(8); tpwr_6 = pTempRaw->getIntVal(9);}
		if(e==6) {tdif_7 = pTempRaw->getIntVal(8); tpwr_7 = pTempRaw->getIntVal(9);}
		if(e==7) {tdif_8 = pTempRaw->getIntVal(8); tpwr_8 = pTempRaw->getIntVal(9);}
		if(e==8) {tdif_9 = pTempRaw->getIntVal(8); tpwr_9 = pTempRaw->getIntVal(9);}
		if(e==9) {tdif_10 = pTempRaw->getIntVal(8); tpwr_10 = pTempRaw->getIntVal(9);}
		if(e==10) {tdif_11 = pTempRaw->getIntVal(8); tpwr_11 = pTempRaw->getIntVal(9);}
		if(e==11) {tdif_12 = pTempRaw->getIntVal(8); tpwr_12 = pTempRaw->getIntVal(9);}
		if(e==12) {tdif_13 = pTempRaw->getIntVal(8); tpwr_13 = pTempRaw->getIntVal(9);}
		if(e==13) {tdif_14 = pTempRaw->getIntVal(8); tpwr_14 = pTempRaw->getIntVal(9);}
		if(e==14) {tdif_15 = pTempRaw->getIntVal(8); tpwr_15 = pTempRaw->getIntVal(9);}

		int ntemps=0, tempav=0;
		for(int i=0; i<6; i++) { 
		  if(pTempRaw->getIntVal(2+i) < 1000) {ntemps++; tempav+=pTempRaw->getIntVal(2+i);}  
		}

		tempav=tempav/ntemps;
		if(e==0) tav_1=tempav/10.;
		if(e==1) tav_2=tempav/10.;
		if(e==2) tav_3=tempav/10.;
		if(e==3) tav_4=tempav/10.;
		if(e==4) tav_5=tempav/10.;
		if(e==5) tav_6=tempav/10.;
		if(e==6) tav_7=tempav/10.;
		if(e==7) tav_8=tempav/10.;
		if(e==8) tav_9=tempav/10.;
		if(e==9) tav_10=tempav/10.;
		if(e==10) tav_11=tempav/10.;
		if(e==11) tav_12=tempav/10.;
		if(e==12) tav_13=tempav/10.;
		if(e==13) tav_14=tempav/10.;
		if(e==14) tav_15=tempav/10.;

	      }

	    Int_t pointID = m_pTempAverage_1->get<TGraph>()->GetN();
	    m_pTempAverage_1->get<TGraph>()->SetPoint(pointID, pointID, tav_1 );
	    pointID = m_pTempAverage_2->get<TGraph>()->GetN();
	    m_pTempAverage_2->get<TGraph>()->SetPoint(pointID, pointID, tav_2 );
	    pointID = m_pTempAverage_3->get<TGraph>()->GetN();
	    m_pTempAverage_3->get<TGraph>()->SetPoint(pointID, pointID, tav_3 );
	    pointID = m_pTempAverage_4->get<TGraph>()->GetN();
	    m_pTempAverage_4->get<TGraph>()->SetPoint(pointID, pointID, tav_4 );
	    pointID = m_pTempAverage_5->get<TGraph>()->GetN();
	    m_pTempAverage_5->get<TGraph>()->SetPoint(pointID, pointID, tav_5 );
	    pointID = m_pTempAverage_6->get<TGraph>()->GetN();
	    m_pTempAverage_6->get<TGraph>()->SetPoint(pointID, pointID, tav_6 );
	    pointID = m_pTempAverage_7->get<TGraph>()->GetN();
	    m_pTempAverage_7->get<TGraph>()->SetPoint(pointID, pointID, tav_7 );
	    pointID = m_pTempAverage_8->get<TGraph>()->GetN();
	    m_pTempAverage_8->get<TGraph>()->SetPoint(pointID, pointID, tav_8 );
	    pointID = m_pTempAverage_9->get<TGraph>()->GetN();
	    m_pTempAverage_9->get<TGraph>()->SetPoint(pointID, pointID, tav_9 );
	    pointID = m_pTempAverage_10->get<TGraph>()->GetN();
	    m_pTempAverage_10->get<TGraph>()->SetPoint(pointID, pointID, tav_10 );
	    pointID = m_pTempAverage_11->get<TGraph>()->GetN();
	    m_pTempAverage_11->get<TGraph>()->SetPoint(pointID, pointID, tav_11 );
	    pointID = m_pTempAverage_12->get<TGraph>()->GetN();
	    m_pTempAverage_12->get<TGraph>()->SetPoint(pointID, pointID, tav_12 );
	    pointID = m_pTempAverage_13->get<TGraph>()->GetN();
	    m_pTempAverage_13->get<TGraph>()->SetPoint(pointID, pointID, tav_13 );
	    pointID = m_pTempAverage_14->get<TGraph>()->GetN();
	    m_pTempAverage_14->get<TGraph>()->SetPoint(pointID, pointID, tav_14 );
	    pointID = m_pTempAverage_15->get<TGraph>()->GetN();
	    m_pTempAverage_15->get<TGraph>()->SetPoint(pointID, pointID, tav_15 );

	    pointID = m_pTempDIF_1->get<TGraph>()->GetN();
	    m_pTempDIF_1->get<TGraph>()->SetPoint(pointID, pointID, tdif_1 );
	    pointID = m_pTempDIF_2->get<TGraph>()->GetN();
	    m_pTempDIF_2->get<TGraph>()->SetPoint(pointID, pointID, tdif_2 );
	    pointID = m_pTempDIF_3->get<TGraph>()->GetN();
	    m_pTempDIF_3->get<TGraph>()->SetPoint(pointID, pointID, tdif_3 );
	    pointID = m_pTempDIF_4->get<TGraph>()->GetN();
	    m_pTempDIF_4->get<TGraph>()->SetPoint(pointID, pointID, tdif_4 );
	    pointID = m_pTempDIF_5->get<TGraph>()->GetN();
	    m_pTempDIF_5->get<TGraph>()->SetPoint(pointID, pointID, tdif_5 );
	    pointID = m_pTempDIF_6->get<TGraph>()->GetN();
	    m_pTempDIF_6->get<TGraph>()->SetPoint(pointID, pointID, tdif_6 );
	    pointID = m_pTempDIF_7->get<TGraph>()->GetN();
	    m_pTempDIF_7->get<TGraph>()->SetPoint(pointID, pointID, tdif_7 );
	    pointID = m_pTempDIF_8->get<TGraph>()->GetN();
	    m_pTempDIF_8->get<TGraph>()->SetPoint(pointID, pointID, tdif_8 );
	    pointID = m_pTempDIF_9->get<TGraph>()->GetN();
	    m_pTempDIF_9->get<TGraph>()->SetPoint(pointID, pointID, tdif_9 );
	    pointID = m_pTempDIF_10->get<TGraph>()->GetN();
	    m_pTempDIF_10->get<TGraph>()->SetPoint(pointID, pointID, tdif_10 );
	    pointID = m_pTempDIF_11->get<TGraph>()->GetN();
	    m_pTempDIF_11->get<TGraph>()->SetPoint(pointID, pointID, tdif_11 );
	    pointID = m_pTempDIF_12->get<TGraph>()->GetN();
	    m_pTempDIF_12->get<TGraph>()->SetPoint(pointID, pointID, tdif_12 );
	    pointID = m_pTempDIF_13->get<TGraph>()->GetN();
	    m_pTempDIF_13->get<TGraph>()->SetPoint(pointID, pointID, tdif_13 );
	    pointID = m_pTempDIF_14->get<TGraph>()->GetN();
	    m_pTempDIF_14->get<TGraph>()->SetPoint(pointID, pointID, tdif_14 );
	    pointID = m_pTempDIF_15->get<TGraph>()->GetN();
	    m_pTempDIF_15->get<TGraph>()->SetPoint(pointID, pointID, tdif_15 );

	    pointID = m_pTempPWR_1->get<TGraph>()->GetN();
	    m_pTempPWR_1->get<TGraph>()->SetPoint(pointID, pointID, tpwr_1 );
	    pointID = m_pTempPWR_2->get<TGraph>()->GetN();
	    m_pTempPWR_2->get<TGraph>()->SetPoint(pointID, pointID, tpwr_2 );
	    pointID = m_pTempPWR_3->get<TGraph>()->GetN();
	    m_pTempPWR_3->get<TGraph>()->SetPoint(pointID, pointID, tpwr_3 );
	    pointID = m_pTempPWR_4->get<TGraph>()->GetN();
	    m_pTempPWR_4->get<TGraph>()->SetPoint(pointID, pointID, tpwr_4 );
	    pointID = m_pTempPWR_5->get<TGraph>()->GetN();
	    m_pTempPWR_5->get<TGraph>()->SetPoint(pointID, pointID, tpwr_5 );
	    pointID = m_pTempPWR_6->get<TGraph>()->GetN();
	    m_pTempPWR_6->get<TGraph>()->SetPoint(pointID, pointID, tpwr_6 );
	    pointID = m_pTempPWR_7->get<TGraph>()->GetN();
	    m_pTempPWR_7->get<TGraph>()->SetPoint(pointID, pointID, tpwr_7 );
	    pointID = m_pTempPWR_8->get<TGraph>()->GetN();
	    m_pTempPWR_8->get<TGraph>()->SetPoint(pointID, pointID, tpwr_8 );
	    pointID = m_pTempPWR_9->get<TGraph>()->GetN();
	    m_pTempPWR_9->get<TGraph>()->SetPoint(pointID, pointID, tpwr_9 );
	    pointID = m_pTempPWR_10->get<TGraph>()->GetN();
	    m_pTempPWR_10->get<TGraph>()->SetPoint(pointID, pointID, tpwr_10 );
	    pointID = m_pTempPWR_11->get<TGraph>()->GetN();
	    m_pTempPWR_11->get<TGraph>()->SetPoint(pointID, pointID, tpwr_11 );
	    pointID = m_pTempPWR_12->get<TGraph>()->GetN();
	    m_pTempPWR_12->get<TGraph>()->SetPoint(pointID, pointID, tpwr_12 );
	    pointID = m_pTempPWR_13->get<TGraph>()->GetN();
	    m_pTempPWR_13->get<TGraph>()->SetPoint(pointID, pointID, tpwr_13 );
	    pointID = m_pTempPWR_14->get<TGraph>()->GetN();
	    m_pTempPWR_14->get<TGraph>()->SetPoint(pointID, pointID, tpwr_14 );
	    pointID = m_pTempPWR_15->get<TGraph>()->GetN();
	    m_pTempPWR_15->get<TGraph>()->SetPoint(pointID, pointID, tpwr_15 );




	  }

	// #####################################################################################################################
	// AHCAL section
	if(collectionName=="EUDAQDataScCAL")
	  {

	    if(pLCCollection->getTypeName() == EVENT::LCIO::LCGENERICOBJECT)
	      {

		int daqquality = pLCCollection->getParameters().getIntVal("DAQquality");
		if(daqquality==1) goodDAQ++;
		else badDAQ++;

		const int nElements = pLCCollection->getNumberOfElements();
		for(int e=0 ; e<nElements ; e++)
		  {
		    const EVENT::LCGenericObject *const pAHCALRaw = 
		      dynamic_cast<const EVENT::LCGenericObject *const>(pLCCollection->getElementAt(e));

		    if(NULL == pAHCALRaw)
		      continue;

		    const int nChannels = pAHCALRaw->getIntVal(NChannelsIndex);
		    if(nChannels!= 36) {
		      LOG4CXX_INFO( dqmMainLogger , "Wrong number of channels ("<<nChannels<<"), skip event" ); 
		      continue;
		    }

		    float ratiobadDAQ = badDAQ / (badDAQ + goodDAQ) ;
		    Int_t ip = pAHCALRaw->getIntVal(ChipIDIndex);
		    if(badDAQ > 0 ) m_DAQerrors->get<TGraph>()->SetPoint(ip, pAHCALRaw->getIntVal(ChipIDIndex), ratiobadDAQ );

		    if( daqquality!=1 ) continue;
		    //---------------------------------------------------------------------------------------
		    for(int f=0; f<36; f++ ) {
		      // Vectors for storing our TDC and ADC by channel
		      
		      int tdcRAW;
		      int adcRAW;
		      int tdc;
		      int adc;
		      int hitbit_tdc;
		      int gainbit_tdc;
		      int hitbit_adc;
		      int gainbit_adc;
		      
		      tdcRAW = pAHCALRaw->getIntVal(TDCFirstChannelIndex+f);
		      adcRAW = pAHCALRaw->getIntVal(ADCFirstChannelIndex+f);
		      
		      tdc = tdcRAW%4096;
		      adc = adcRAW%4096;
		      
		      hitbit_adc = (adcRAW & 0x1000)?1:0;
		      gainbit_adc = (adcRAW & 0x2000)?1:0;
		      
		      hitbit_tdc = (tdcRAW & 0x1000)?1:0;
		      gainbit_tdc = (tdcRAW & 0x2000)?1:0;
		      

		      if( hitbit_adc != hitbit_tdc || pAHCALRaw->getIntVal(EvtNrIndex) ==0 ) continue;
		      
		      if(hitbit_adc != 1) continue;
		      
		      
		      int ijk = electronicsToIJK(pAHCALRaw->getIntVal(ChipIDIndex),f);
		      int I = ijk / 10000;
		      int J = ( ijk  % 10000 ) /100;
		      int K = ( ijk  % 10000 ) % 100;
		      if(adc>300) {
			m_pMIP_300->get<TH3I>()->Fill(K,I,J,adc);
			if(K==1) m_pMIP_300_l01->get<TH2I>()->Fill(I,J,adc);
			if(K==2) m_pMIP_300_l02->get<TH2I>()->Fill(I,J,adc);
			if(K==3) m_pMIP_300_l03->get<TH2I>()->Fill(I,J,adc);
			if(K==4) m_pMIP_300_l04->get<TH2I>()->Fill(I,J,adc);
			if(K==5) m_pMIP_300_l05->get<TH2I>()->Fill(I,J,adc);
			if(K==6) m_pMIP_300_l06->get<TH2I>()->Fill(I,J,adc);
			if(K==7) m_pMIP_300_l07->get<TH2I>()->Fill(I,J,adc);
			if(K==8) m_pMIP_300_l08->get<TH2I>()->Fill(I,J,adc);
			if(K==9) m_pMIP_300_l09->get<TH2I>()->Fill(I,J,adc);
			if(K==10) m_pMIP_300_l10->get<TH2I>()->Fill(I,J,adc);
			if(K==11) m_pMIP_300_l11->get<TH2I>()->Fill(I,J,adc);
			if(K==12) m_pMIP_300_l12->get<TH2I>()->Fill(I,J,adc);
			if(K==13) m_pMIP_300_l13->get<TH2I>()->Fill(I,J,adc);
			if(K==14) m_pMIP_300_l14->get<TH2I>()->Fill(I,J,adc);
			if(K==15) m_pMIP_300_l15->get<TH2I>()->Fill(I,J,adc);
		      }
		      
		      if(adc<=300) {
			m_pPed_300->get<TH3I>()->Fill(K,I,J,adc);
			if(K==1) m_pPed_300_l01->get<TH2I>()->Fill(I,J,adc);
			if(K==2) m_pPed_300_l02->get<TH2I>()->Fill(I,J,adc);
			if(K==3) m_pPed_300_l03->get<TH2I>()->Fill(I,J,adc);
			if(K==4) m_pPed_300_l04->get<TH2I>()->Fill(I,J,adc);
			if(K==5) m_pPed_300_l05->get<TH2I>()->Fill(I,J,adc);
			if(K==6) m_pPed_300_l06->get<TH2I>()->Fill(I,J,adc);
			if(K==7) m_pPed_300_l07->get<TH2I>()->Fill(I,J,adc);
			if(K==8) m_pPed_300_l08->get<TH2I>()->Fill(I,J,adc);
			if(K==9) m_pPed_300_l09->get<TH2I>()->Fill(I,J,adc);
			if(K==10) m_pPed_300_l10->get<TH2I>()->Fill(I,J,adc);
			if(K==11) m_pPed_300_l11->get<TH2I>()->Fill(I,J,adc);
			if(K==12) m_pPed_300_l12->get<TH2I>()->Fill(I,J,adc);
			if(K==13) m_pPed_300_l13->get<TH2I>()->Fill(I,J,adc);
			if(K==14) m_pPed_300_l14->get<TH2I>()->Fill(I,J,adc);
			if(K==15) m_pPed_300_l15->get<TH2I>()->Fill(I,J,adc);
		      }
		    }
		    //---------------------------------------------------------------------------------------


		  }//for elements
	
	      }// if LCGENERICOBJECT

	  }//if collectionName == EUDAQDataScCAL

      }
    return STATUS_CODE_SUCCESS;
    
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode AHCAL_15Layers::startOfCycle()
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- startOfCycle()" );
    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode AHCAL_15Layers::endOfCycle()
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- endOfCycle()" );

    // run all quality tests on all monitor elements
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMModuleApi::runQualityTests(this));

    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode AHCAL_15Layers::startOfRun(DQMRun *pRun)
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- startOfRun()" );
    LOG4CXX_INFO( dqmMainLogger , "Run no " << pRun->getRunNumber() );
    //	time_t startTime = pRun->getStartTime();
    time_t startTime = std::chrono::system_clock::to_time_t(pRun->getStartTime());

    std::string timeStr;
    DQMCoreTool::timeToHMS(startTime, timeStr);

    goodDAQ = 0;
    badDAQ = 0;

    LOG4CXX_INFO( dqmMainLogger , "Start time " << timeStr );
    LOG4CXX_INFO( dqmMainLogger , "Detector is " << pRun->getDetectorName() );
    LOG4CXX_INFO( dqmMainLogger , "Description " << pRun->getDescription() );

    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode AHCAL_15Layers::endOfRun(DQMRun *pRun)
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- endOfRun()" );
    LOG4CXX_INFO( dqmMainLogger , "Run no " << pRun->getRunNumber() );

    //	time_t endTime = pRun->getEndTime();
    time_t endTime = std::chrono::system_clock::to_time_t(pRun->getEndTime());
    std::string timeStr;
    DQMCoreTool::timeToHMS(endTime, timeStr);

    LOG4CXX_INFO( dqmMainLogger , "End time " << timeStr );

    return STATUS_CODE_SUCCESS;
  }


  StatusCode AHCAL_15Layers::buildGeometryMap(const TiXmlHandle xmlHandle)
  {

    LOG4CXX_INFO( dqmMainLogger , "Building geometry map..." );

    //Getting the very first child of the XML file; in our case, this is the dqm4hepGeometryMap bracket.
    const dqm4hep::TiXmlHandle xmlFileHandle(xmlHandle.FirstChildElement().Element());

    //Giving a unique name to the globalGeometryProperties object
    dqm4hep::TiXmlHandle pGlobalPropertiesXmlElement(xmlFileHandle.FirstChild("globalGeometryProperties").Element());

    //Iterate over each layer
    for (dqm4hep::TiXmlElement *pLayerXmlElement = xmlFileHandle.FirstChild("layer").Element(); NULL != pLayerXmlElement; pLayerXmlElement = pLayerXmlElement->NextSiblingElement("layer"))
      {

	dqm4hep::TiXmlHandle pLayerHandle(pLayerXmlElement);

	//Iterate over each chip
	for (dqm4hep::TiXmlElement *pChipXmlElement = pLayerHandle.FirstChild("chip").Element(); NULL != pChipXmlElement; pChipXmlElement = pChipXmlElement->NextSiblingElement("chip"))
	  {

	    dqm4hep::TiXmlHandle pChipHandle(pChipXmlElement);
	
	    //Iterate over each channel
	    for (dqm4hep::TiXmlElement *pChannelXmlElement = pChipHandle.FirstChild("channel").Element(); NULL != pChannelXmlElement; pChannelXmlElement = pChannelXmlElement->NextSiblingElement("channel"))
	      {

		int ChipID, ChannelID, I, J, K, ChpChnNum, ijkNum;

		//Pull out all the data: chip number, channel number, ijk
		pChipXmlElement->QueryValueAttribute<int>("id", &ChipID);
		pChannelXmlElement->QueryValueAttribute<int>("id", &ChannelID);
		pChannelXmlElement->QueryValueAttribute<int>("i", &I);
		pChannelXmlElement->QueryValueAttribute<int>("j", &J);
		pChannelXmlElement->QueryValueAttribute<int>("k", &K);

		//Formatting data to go into our map
		ChpChnNum = ChipID*100+ChannelID;
		ijkNum = I*10000 + J*100 + K;


		//Filling the map (Chip, Chn)->(I, J, K)
		ijkmap.insert(std::make_pair(ChpChnNum, ijkNum));

		//Filling the map (I, J, K)->(Chip, Chn)
		chpchnmap.insert(std::make_pair(ijkNum, ChpChnNum));

	      }
	  }
      }

    std::cout<<chpchnmap.size()<<" "<< ijkmap.size()<<std::endl;

    LOG4CXX_INFO( dqmMainLogger , "Geometry map built successfully." );

    return STATUS_CODE_SUCCESS;

  }

  int AHCAL_15Layers::electronicsToIJK(int Chip, int Channel)
  {
    std::map<int, int>::iterator itMap;
    int index = Chip*100+Channel;
    int IJK = -1;
    // std::cout<<"electronicsToIJK "<<ijkmap.size()<<std::endl;
    //std::cout<<index<<" "<<Chip<<" "<<Channel<<std::endl;

    if(ijkmap.find(index) != ijkmap.end())
      {
	itMap = ijkmap.find(index);
	IJK = itMap->second;
	//	std::cout<<"find: "<<IJK<<std::endl;
      }

    return IJK;
  }

  int AHCAL_15Layers::IJKToElectronics(int I, int J, int K)
  {
    std::map<int, int>::iterator itMap;
    int index = I*10000+J*100+K;
    int ChipChn= -1;

    if(chpchnmap.find(index) != chpchnmap.end())
      {
	itMap = chpchnmap.find(index);
	ChipChn = itMap->second;
      }

    return ChipChn;
  }

};

